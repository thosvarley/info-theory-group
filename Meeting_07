{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Group Meeting 7\n",
    "\n",
    "Functional and effective network inference \n",
    "\n",
    "### Readings \n",
    "\n",
    "Novelli and Lizier, 2020 https://arxiv.org/pdf/2007.07500.pdf\n",
    "\n",
    "*Bonus Reading:*\n",
    "\n",
    "Novelli et al., 2019 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6663300/\n",
    "\n",
    "\n",
    "#### Functional & Effective Networks from Data\n",
    "\n",
    "In complex systems science, we often do not have the underlying \"map\" of our system readily available to us and instead have to infer it's structure from observations about the real world: for example, in the brain it is (currently) impossible to extract the wiring diagram of even small patches of cortex, and in economic systems, the structure of interactions between firms is abstracted and contingent on external factors. Usually, instead of the underlying connectivity, we have time-series data that we record from the system of interest, and from that we can attempt to reconstruct the underlying causal structure of the system. \n",
    "\n",
    "There are three different ways to attempt to construct a network model of a system:\n",
    "\n",
    "1) _Structural Connectivity_: This is the most \"rigid\" network model: it is assumed to remain static and is the \"ground\" that supports on-going dynamics. Here, elements of the system are treated as nodes and the edges between them are some kind of substrate that the dynamics play out \"on top of\". A classic example is the neural wiring diagram: physical neurons synapse onto each-other and action potentials transmit signals between them via neurotransmitter release. Another example would be the physical infrastructure of the Internet, or (slightly more abstracted), the network of hyperlinks that makes up the World Wide Web. \n",
    "\n",
    "Generally *hard* to infer from just time-series data, unless you can make certain assumptions. \n",
    "\n",
    "2) _Functional Connectivity_: This is the most abstract network model. Once again, elements of the system are nodes, but here edges are *undirected* and quantifiy some kind of undirected statistical dependence between the elements. The canonical model of functional connectivity is from fMRI data: a network of brain regions can be defined by mapping brain regions to nodes, and then the edges between them are given by linear Pearson correlation coefficients between them. Unlike structural connectivity which implies some kind of physical/causal process describing the system, the functional connectivity is purely correlational. \n",
    "\n",
    "Generally *easy* to infer from time-series data, although different methods can return wildly different results. \n",
    "\n",
    "The standard information-theoretic estimator is *mutual information* or *conditional mutual information*.\n",
    "\n",
    "3) _Effective Connectivity_: Effective connectivity combines elements of structural connectivity and functional connectivity. Like structural connectivity, it is a *directed* relationship, but like functional connectivity it is a statistical description of the data rather than a *causal* one. I cannot oversate enough: *effective connectivity is NOT causal structure!* Many differnet causal structures can return the same effective connectivity. Effective connectivity can generally be understood as understanding how the state or behavior of one element of the system effects, or constrains, the future of another element of the system. \n",
    "\n",
    "Generally *hard* to infer from time-series data. \n",
    "\n",
    "The standard information-theoretic estimator is *transfer entropy* or *multivariate transfer entropy*\n",
    "\n",
    "Under certain (unusual) circumstances, the effective connectivity *can* be identical to the structural connectivity although they are **not the same concept.** For a totally stationary process, with a huge amount of available data, the transfer entropy network \n",
    "\n",
    "### Functional Connectivity\n",
    "\n",
    "\"Classical\" functional connectivty is done just by calculating the pairwise statistical dependence between all elements of the system (in this case, mutual information). This gives a measure of how mutually informative two elements of the system are about each-other, without providing any model of whether the interaction is directed or mediated by higher-order relationships. \n",
    "\n",
    "Pros: Very fast, easy to interpret. \n",
    "\n",
    "Cons: Bivariate nature makes it blind to synergies, specificities and redundancies in the dataset.\n",
    "\n",
    "##### Significance Testing \n",
    "\n",
    "When doing functional or effective network inference using information theory, is generally considered to be *vitally* important to threshold your edges using a significance test. This is because information theoretic measures will almost always have a bias built in which results in numerical results that can be misleading. In the case of mutual information, the bias is always *over*-estimating the true mutual information. Consequently, just because you see a non-zero value doesn't mean that the effect can be assumed to be \"real.\" \n",
    "\n",
    "There are two steps to testing bivariate mutual information (and TE) measures. \n",
    "\n",
    "1) Calculate your empirical MI. \n",
    "\n",
    "2) Create a large number of null time-series (be sure to preserve the number of spikes, autocorrelation, or whatever else might be important). \n",
    "\n",
    "3) Do a significance test: if p<$\\alpha$, you can conclude a significant result and a \"real\" edge.\n",
    "\n",
    "4) Subtract off the expected value (mean) of the null distribution to produce a *bias corrected MI estimate*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline \n",
    "import seaborn as sns #Seaborn is a wrapper for matplotlib - it makes everything prettier.\n",
    "sns.set(style=\"white\")\n",
    "from copy import deepcopy\n",
    "from collections import Counter\n",
    "from scipy.stats import zscore, entropy\n",
    "import networkx as nx \n",
    "\n",
    "def mutual_information(X,Y):\n",
    "    H_joint = entropy(list(Counter(zip(X,Y)).values()), base=2)\n",
    "    H_X = entropy(list(Counter(X).values()), base=2)\n",
    "    H_Y = entropy(list(Counter(Y).values()), base=2)\n",
    "    return H_X + H_Y - H_joint\n",
    "\n",
    "def conditional_mutual_information(X,Y,Z):\n",
    "    H_XZ = entropy(list(Counter(zip(X,Z)).values()), base=2)\n",
    "    H_YZ = entropy(list(Counter(zip(Y,Z)).values()), base=2)\n",
    "    H_XYZ = entropy(list(Counter(zip(X,Y,Z)).values()), base=2)\n",
    "    H_Z = entropy(list(Counter(Z).values()), base=2)\n",
    "    return H_XZ + H_YZ - H_XYZ - H_Z\n",
    "\n",
    "data = np.load(\"data/HCP_BOLD.npz\")\n",
    "bold = zscore(data[\"signal\"], axis=1)\n",
    "discrete = deepcopy(bold)\n",
    "discrete[discrete > 0] = 1\n",
    "discrete[discrete < 0] = 0\n",
    "discrete = discrete.astype(\"int16\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Significance Testing A Single Edge\n",
    "\n",
    "Here is an example, consider two discretized BOLD time-series known to have a high mutual information:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empirical MI: 0.3320531969323486 bit\n"
     ]
    }
   ],
   "source": [
    "empirical = mutual_information(discrete[4], discrete[5])\n",
    "print(\"Empirical MI:\", empirical, \"bit\")\n",
    "\n",
    "null = np.zeros(10000)\n",
    "for i in range(null.shape[0]):\n",
    "    null_5 = deepcopy(discrete[5])\n",
    "    np.random.shuffle(null_5)\n",
    "    \n",
    "    null[i] = mutual_information(discrete[5], null_5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected Null: 0.000595592459203456 bit\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(null, bins=25, density=True)\n",
    "plt.yscale(\"log\")\n",
    "plt.title(\"P-Value: {0}\".format(str(np.sum(null > empirical))))\n",
    "print(\"Expected Null:\", np.mean(null), \"bit\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bias-Corrected MI 0.33145638588372395 bit\n"
     ]
    }
   ],
   "source": [
    "print(\"Bias-Corrected MI\", empirical-np.mean(null), \"bit\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building An FC-Matrix \n",
    "\n",
    "Building the actual functional connectivity matrix is very easy: you just do a pairwise comparison of every combination i and j, and feed that into a matrix. \n",
    "\n",
    "*Note that, to save time, I am **not** significance-testing each edge or bias-correcting, this is just for demo purposes.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mat = np.zeros((discrete.shape[0], discrete.shape[0]))\n",
    "\n",
    "for i in range(discrete.shape[0]):\n",
    "    for j in range(i): #Because mutual information is symmetric, you only need to fill the lower triangle.\n",
    "        mi = mutual_information(discrete[i], discrete[j])\n",
    "        mat[i][j] = mi \n",
    "        mat[j][i] = mi #MI(X,Y) = MI(Y,X), so you get two for the computational price of 1. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Mutual Information Matrix (No Bias Correction)')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,8))\n",
    "plt.imshow(mat, aspect=\"auto\")\n",
    "plt.xlabel(\"Brain Regions\")\n",
    "plt.ylabel(\"Brain Regions\")\n",
    "plt.colorbar(label=\"Mutual Information\")\n",
    "plt.title(\"Mutual Information Matrix (No Bias Correction)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scary Synergies\n",
    "\n",
    "As we've previously discussed, a major problem with *all* pairwise network construction methods is that they can be blind to synergies and redundacies in the data. To review, consider this simple example of two random nodes, and then a third that is the instantanious exclusive-OR ($XOR$) between them:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'True Generating Structure')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "G = nx.DiGraph()\n",
    "G.add_nodes_from((\"X1\",\"X2\",\"XOR_12\"))\n",
    "G.add_edges_from(((\"X1\",\"XOR_12\"),(\"X2\",\"XOR_12\")))\n",
    "\n",
    "nx.draw_spectral(G, with_labels=True, node_size=10**3)\n",
    "plt.title(\"True Generating Structure\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MI(X1 ; X2) 0.00031185518110876664 bit\n",
      "MI(X1 ; XOR_12) 0.0014344182198879896 bit\n",
      "MI(X2 ; XOR_12) 0.000261754342471443 bit\n"
     ]
    }
   ],
   "source": [
    "X1 = np.random.randint(0,2,1200)\n",
    "X2 = np.random.randint(0,2,1200)\n",
    "print(\"MI(X1 ; X2)\", mutual_information(X1, X2), \"bit\")\n",
    "XOR_12 = np.logical_xor(X1, X2)\n",
    "print(\"MI(X1 ; XOR_12)\", mutual_information(X1, XOR_12), \"bit\")\n",
    "print(\"MI(X2 ; XOR_12)\", mutual_information(X2, XOR_12), \"bit\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Doing the correction, we will see that these edges won't pass significance testing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-d57dd44ea200>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnull\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnull_X1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0mnull\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmutual_information\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXOR_12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnull_X1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnull\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m25\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdensity\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-2-dae9dfa1a289>\u001b[0m in \u001b[0;36mmutual_information\u001b[0;34m(X, Y)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmutual_information\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mH_joint\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mentropy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0mH_X\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mentropy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mH_Y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mentropy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/miniconda3/lib/python3.8/collections/__init__.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, iterable, **kwds)\u001b[0m\n\u001b[1;32m    550\u001b[0m         '''\n\u001b[1;32m    551\u001b[0m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCounter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 552\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    553\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    554\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__missing__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/miniconda3/lib/python3.8/collections/__init__.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, iterable, **kwds)\u001b[0m\n\u001b[1;32m    635\u001b[0m                     \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCounter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# fast path when counter is empty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    636\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 637\u001b[0;31m                 \u001b[0m_count_elements\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    638\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    639\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "null = np.zeros(10000)\n",
    "null_X1 = deepcopy(X1)\n",
    "for i in range(null.shape[0]):\n",
    "    np.random.shuffle(null_X1)\n",
    "    null[i] = mutual_information(XOR_12, null_X1)\n",
    "\n",
    "plt.hist(null, bins=25, density=True)\n",
    "plt.yscale(\"log\")\n",
    "plt.title(\"P-Value: {0}\".format(np.sum(null > mutual_information(X1, XOR_12)) / null.shape[0]))\n",
    "plt.vlines(mutual_information(X1, XOR_12), 0, 100, color=\"red\", label=\"Empirical Value\")\n",
    "plt.legend()\n",
    "\n",
    "print(\"Expected Null:\", np.mean(null), \"bit\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is clear that doing simple pairwise mutual information here will *not* find the correct generating structure, as the evolution of the $XOR$-node is a synergistic function of $X_1$ and $X_2$. A researcher would infer that all three elements of the system are completely disconnected from each-other. \n",
    "\n",
    "##### Conditioning?\n",
    "\n",
    "One possible way forward is to condition each pair of elements on the remaining elements to attempt to account for potential synergies and redundancies in the data. For an $N$ element system, we might say define $E_{ij}$ as:\n",
    "\n",
    "\\begin{equation}\n",
    "E_{ij} = MI(X_i, X_j | X_1, X_2 ... X_{i-1}, X_{i+1}...X_{j-1}, X_{j+1}...X_N)\n",
    "\\end{equation}\n",
    "\n",
    "In this way, $E_{ij}$ \"accounts for\" all the rest of the information in the system that might affect how $X_i$ and $X_j$ interact. Now, when looking at $X_1$, $X_2$, and the $XOR$-node and conditioning on the remaining node in the system, we now see 1 bit of shared information (which is correct). We are now seeing that "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MI(X1 ; XOR_12 | X2) 0.9993995865717012 bit\n",
      "MI(X2 ; XOR_12 | X1) 0.9982269226942847 bit\n"
     ]
    }
   ],
   "source": [
    "print(\"MI(X1 ; XOR_12 | X2)\", conditional_mutual_information(X1, XOR_12, X2), \"bit\")\n",
    "print(\"MI(X2 ; XOR_12 | X1)\", conditional_mutual_information(X2, XOR_12, X1), \"bit\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unfortunately, we have now added in the problem of a relationship between $X_1$ and $X_2$ which does not really exist, so you would infer a spurious edge, resulting in a closed, undirected triangle. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MI(X1 ; X2 | XOR_12) 0.998277023532922 bit\n"
     ]
    }
   ],
   "source": [
    "print(\"MI(X1 ; X2 | XOR_12)\", conditional_mutual_information(X1, X2, XOR_12), \"bit\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another issue is that we've now found 1 bit of information in $MI(X_1 ; XOR_{12} | X_2)$ and 1 bit of information in $MI(X_2 ; XOR_{12})$, if we look at the *joint* states of $X_1$ and $X_2$ together, we get:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MI(X1X2 ; XOR_12) 0.9993506898146105 bit\n"
     ]
    }
   ],
   "source": [
    "joint = [\"\".join(str(X1[i])+str(X2[i])) for i in range(len(X2))]\n",
    "print(\"MI(X1X2 ; XOR_12)\", mutual_information(joint, XOR_12), \"bit\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, despite having 1 bit of information in each edge (for a total of 2 bit), the higher-order \"hyperedge\" that includes both X1 and X2 jointly only has 1 bit as well. So where does the extra information \"go?\"\n",
    "\n",
    "What is happening here is that pairwise network analysis is *not* the natural model for this kind of process because synergistic dynamics demand a hypergraph. The higher order edge ($MI(X_1, X_2 ; XOR_{12})$) is the *correct* representation, and all attempts to break the system down into pairwise edges will either miss information, or produces spurious edges. While the underlying generating process can be cast as a network, it is almost impossible to reconstruct an accurate model based *only* on undirected pairwise interactions. In fact, it is impossible. \n",
    "\n",
    "There is a way forward, but it requires moving beyond classical Shannon Information Theory into the brave new world of partial information decomposition, and we haven't quite gotten there yet. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Effective Connectivity\n",
    "\n",
    "Effective connectivity is typically measured by transfer entropy. Recall that:\n",
    "\n",
    "\\begin{equation}\n",
    "TE(X \\rightarrow Y) = MI(X_{t-1}^{-l} ; Y_{t} | Y_{t-1}^{-k})\n",
    "\\end{equation}\n",
    "\n",
    "As with mutual information, given an optimal values of $l$ and $k$, the simplest mode of network inference is just to do pairwise analysis. At that level, the procedure is essentially the same as for mutual information: for every edge, construct a distribution of surrogate null TE values by shuffling the time-series, and keep the edge if and only if the p-value is less than some pre-selected $\\alpha$. Don't report the empirical TE value, but rather the bias-corrected value, obtained by subtracting off the expected value of the null from the empirical value. \n",
    "\n",
    "Unfortunately many of the same issues with synergy and redundancy we discussed when talking about mutual information applies here: the pairwise analysis will be blind to synergies and redundancies in the data, either missing purely synergistic relationships (where $X_1$ and $X_2$ are required to predict $Y$'s future), or \"double-counting\" redundant information. \n",
    "\n",
    "We can address these issues with multivariate generalizations of transfer entropy (using conditioning). \n",
    "\n",
    "Our goal when doing effective network inference is to find the *minimal set of source nodes that inform on $Y_t$.* Now, keep in mind that we are including redundant and synergistic relationships here: there may be two sources $S_1, S_2$ where $TE(S_1 \\rightarrow Y)=0$ and $TE(S_2 \\rightarrow Y)=0$ BUT $TE(S_1S_2 \\rightarrow Y)>>0$. In this case, both sources would be part of our source-set and we would add edges from $S_{1/2} \\rightarrow Y$ to our inferred network, however, they would not necessarilly have meaningful weights. Networks inferred using multivariate transfer entropy are typically binary. This is another case where binary networks are strictly appropriate and we would be better off using hypergraphs, although those become computationally very difficult. \n",
    "\n",
    "###### Quick-n-Dirty Algorithm for Multivariate TE Network Inference\n",
    "\n",
    "1) Start with some target variable $Y$ and a set of candidate sources ($X_1,X_2,X_3,...X_n$)\n",
    "\n",
    "2) Find the $Y_{t-1}^{-k}$ that maximizes the active information storage in $Y$. \n",
    "\n",
    "3) Calculate $TE(X_{k} \\rightarrow Y_t)$ for all possible parents and select the one with the largest significant (shuffled null models as above) TE, add it to our \"parent set $P$\"\n",
    "\n",
    "4) Calculate $TE(X_{k} \\rightarrow Y_t | P)$, for all remaining candidate sources, this time conditioning on every element in $P$ (in this case, just one). Again, pick the $X_k$ that has the highest significant transfer entropy, and add it to $P$. \n",
    "\n",
    "5) Repeat this process until either all canidate sources are exhausted, or there are no more signifcant sources. \n",
    "\n",
    "The result will be a directed, binary (unweighted) network, where every node has a set of parent nodes that contribute all the available information about the future of the target node. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### IDTxl\n",
    "\n",
    "**Do not attempt to implement any of the above. You will mess it up.**\n",
    "When dealing with these advanced analyses, which involve optimizing many moving parts, greedy algorithms, and complex multivariate analyses, I *strongly* advise using pre-written packages, which will do all of this for you with minimal muss-and-fuss. \n",
    "\n",
    "My go-to package is IDTxl (**I**nformation **D**ynamics **T**oolkit xl), written by a number of giants in the field of information theory, spearheaded by Joseph Lizier (who is the final author on the book we have been reading through). IDTxl will go through the multivariate transfer entropy network inference, construct all your null time-series, perform the (FDR-corrected) statistical significance tests, and do basically everything I have detailed about without you having to worry about it. \n",
    "\n",
    "You can find the documentation for IDTxl here: https://pwollstadt.github.io/IDTxl/html/index.html\n",
    "\n",
    "If you want to use it for anything and want help, let me know. \n",
    "\n",
    "Below is an example of a multivariate transfer entropy network inference on our discrete BOLD data. *In general this is bad. Don't do TE on BOLD data, and if you absolutely must, there are better ways than binarizing. This is solely for package-demonstration purposes!*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adding data with properties: 200 processes, 1200 samples, 1 replications\n",
      "overwriting existing data\n",
      "\n",
      "####### analysing target with index 0 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 0 - testing sources [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(0, 1)]\n",
      "testing candidate: (0, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (6, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (58, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (185, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (1, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (97, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (8, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(6, 1), (170, 1), (58, 1), (185, 1), (1, 1), (97, 1)]\n",
      "testing candidate: (97, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(0, 1), (6, 1), (170, 1), (58, 1), (185, 1), (1, 1), (97, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(6, 1), (170, 1), (58, 1), (185, 1), (1, 1), (97, 1)]\n",
      "final target samples: [(0, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 1 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 1 - testing sources [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(1, 1)]\n",
      "testing candidate: (1, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (103, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (32, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (44, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (178, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (152, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(103, 1), (32, 1), (44, 1), (178, 1), (61, 1)]\n",
      "testing candidate: (61, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(1, 1), (103, 1), (32, 1), (44, 1), (178, 1), (61, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(103, 1), (32, 1), (44, 1), (178, 1), (61, 1)]\n",
      "final target samples: [(1, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 2 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 2 - testing sources [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(2, 1)]\n",
      "testing candidate: (2, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (0, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (113, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (5, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (108, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (119, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(9, 1), (0, 1), (113, 1), (5, 1), (108, 1)]\n",
      "testing candidate: (108, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(2, 1), (9, 1), (0, 1), (113, 1), (5, 1), (108, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(9, 1), (0, 1), (113, 1), (5, 1), (108, 1)]\n",
      "final target samples: [(2, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 3 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 3 - testing sources [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(3, 1)]\n",
      "testing candidate: (3, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (101, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (78, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (13, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (147, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (28, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(101, 1), (167, 1), (78, 1), (2, 1), (13, 1), (147, 1)]\n",
      "testing candidate: (147, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(3, 1), (101, 1), (167, 1), (78, 1), (2, 1), (13, 1), (147, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(101, 1), (167, 1), (78, 1), (2, 1), (13, 1), (147, 1)]\n",
      "final target samples: [(3, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 4 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 4 - testing sources [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(4, 1)]\n",
      "testing candidate: (4, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (29, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (67, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (104, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (174, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(29, 1), (59, 1), (67, 1), (104, 1), (174, 1)]\n",
      "testing candidate: (174, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(4, 1), (29, 1), (59, 1), (67, 1), (104, 1), (174, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(29, 1), (59, 1), (67, 1), (104, 1), (174, 1)]\n",
      "final target samples: [(4, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 5 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 5 - testing sources [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(5, 1)]\n",
      "testing candidate: (5, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (4, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (6, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (30, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (3, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(4, 1), (6, 1), (36, 1), (30, 1), (3, 1)]\n",
      "testing candidate: (3, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(5, 1), (4, 1), (6, 1), (36, 1), (30, 1), (3, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(4, 1), (6, 1), (36, 1), (30, 1), (3, 1)]\n",
      "final target samples: [(5, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 6 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 6 - testing sources [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(6, 1)]\n",
      "testing candidate: (6, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (29, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (124, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (84, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (58, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(29, 1), (121, 1), (195, 1), (124, 1), (84, 1)]\n",
      "testing candidate: (84, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(6, 1), (29, 1), (121, 1), (195, 1), (124, 1), (84, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(29, 1), (121, 1), (195, 1), (124, 1), (84, 1)]\n",
      "final target samples: [(6, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 7 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 7 - testing sources [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(7, 1)]\n",
      "testing candidate: (7, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (4, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (10, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (102, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (79, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(4, 1), (10, 1), (132, 1), (102, 1), (150, 1)]\n",
      "testing candidate: (150, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(7, 1), (4, 1), (10, 1), (132, 1), (102, 1), (150, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(4, 1), (10, 1), (132, 1), (102, 1), (150, 1)]\n",
      "final target samples: [(7, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 8 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 8 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(8, 1)]\n",
      "testing candidate: (8, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (25, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (14, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (197, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (152, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (11, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (191, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(25, 1), (14, 1), (197, 1), (152, 1), (11, 1)]\n",
      "testing candidate: (11, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(8, 1), (25, 1), (14, 1), (197, 1), (152, 1), (11, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(25, 1), (14, 1), (197, 1), (152, 1), (11, 1)]\n",
      "final target samples: [(8, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 9 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 9 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(9, 1)]\n",
      "testing candidate: (9, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (10, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (19, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (101, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (158, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (11, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (142, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(10, 1), (19, 1), (101, 1), (158, 1), (11, 1)]\n",
      "testing candidate: (11, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(9, 1), (10, 1), (19, 1), (101, 1), (158, 1), (11, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(10, 1), (19, 1), (101, 1), (158, 1), (11, 1)]\n",
      "final target samples: [(9, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 10 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 10 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(10, 1)]\n",
      "testing candidate: (10, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (110, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (5, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (1, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (119, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(110, 1), (5, 1), (36, 1), (88, 1), (1, 1)]\n",
      "testing candidate: (1, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(10, 1), (110, 1), (5, 1), (36, 1), (88, 1), (1, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(110, 1), (5, 1), (36, 1), (88, 1), (1, 1)]\n",
      "final target samples: [(10, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 11 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 11 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(11, 1)]\n",
      "testing candidate: (11, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (4, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (10, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (179, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (34, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(4, 1), (10, 1), (46, 1), (74, 1), (179, 1)]\n",
      "testing candidate: (179, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(11, 1), (4, 1), (10, 1), (46, 1), (74, 1), (179, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(4, 1), (10, 1), (46, 1), (74, 1), (179, 1)]\n",
      "final target samples: [(11, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 12 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 12 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(12, 1)]\n",
      "testing candidate: (12, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (57, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (69, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (155, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (120, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(121, 1), (57, 1), (69, 1), (155, 1)]\n",
      "testing candidate: (155, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(12, 1), (121, 1), (57, 1), (69, 1), (155, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(121, 1), (57, 1), (69, 1), (155, 1)]\n",
      "final target samples: [(12, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 13 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 13 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(13, 1)]\n",
      "testing candidate: (13, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (177, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (141, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (178, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (11, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(48, 1), (116, 1), (177, 1), (141, 1), (178, 1)]\n",
      "testing candidate: (178, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(13, 1), (48, 1), (116, 1), (177, 1), (141, 1), (178, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(48, 1), (116, 1), (177, 1), (141, 1), (178, 1)]\n",
      "final target samples: [(13, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 14 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 14 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(14, 1)]\n",
      "testing candidate: (14, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (57, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (49, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (161, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (188, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(57, 1), (49, 1), (161, 1), (36, 1), (188, 1)]\n",
      "testing candidate: (49, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(14, 1), (57, 1), (49, 1), (161, 1), (36, 1), (188, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(57, 1), (49, 1), (161, 1), (36, 1), (188, 1)]\n",
      "final target samples: [(14, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 15 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 15 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(15, 1)]\n",
      "testing candidate: (15, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (90, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (57, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (187, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(121, 1), (154, 1), (90, 1), (57, 1), (187, 1)]\n",
      "testing candidate: (187, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(15, 1), (121, 1), (154, 1), (90, 1), (57, 1), (187, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(121, 1), (154, 1), (90, 1), (57, 1), (187, 1)]\n",
      "final target samples: [(15, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 16 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 16 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(16, 1)]\n",
      "testing candidate: (16, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (15, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (136, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (123, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (28, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(116, 1), (15, 1), (121, 1), (136, 1), (123, 1)]\n",
      "testing candidate: (123, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(16, 1), (116, 1), (15, 1), (121, 1), (136, 1), (123, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(116, 1), (15, 1), (121, 1), (136, 1), (123, 1)]\n",
      "final target samples: [(16, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 17 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 17 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(17, 1)]\n",
      "testing candidate: (17, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(36, 1)]\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(17, 1), (36, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 1 selected sources\n",
      "final source samples: [(36, 1)]\n",
      "final target samples: [(17, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 18 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 18 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(18, 1)]\n",
      "testing candidate: (18, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (15, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (20, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (177, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (129, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(121, 1), (15, 1), (154, 1), (20, 1), (177, 1), (129, 1)]\n",
      "testing candidate: (129, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(18, 1), (121, 1), (15, 1), (154, 1), (20, 1), (177, 1), (129, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(121, 1), (15, 1), (154, 1), (20, 1), (177, 1), (129, 1)]\n",
      "final target samples: [(18, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 19 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 19 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(19, 1)]\n",
      "testing candidate: (19, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (122, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (20, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (189, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (80, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (93, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(26, 1), (122, 1), (20, 1), (189, 1), (80, 1)]\n",
      "testing candidate: (80, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(19, 1), (26, 1), (122, 1), (20, 1), (189, 1), (80, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(26, 1), (122, 1), (20, 1), (189, 1), (80, 1)]\n",
      "final target samples: [(19, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 20 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 20 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(20, 1)]\n",
      "testing candidate: (20, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (41, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (21, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (83, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (139, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (93, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(41, 1), (21, 1), (167, 1), (83, 1), (139, 1)]\n",
      "testing candidate: (139, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(20, 1), (41, 1), (21, 1), (167, 1), (83, 1), (139, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(41, 1), (21, 1), (167, 1), (83, 1), (139, 1)]\n",
      "final target samples: [(20, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 21 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 21 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(21, 1)]\n",
      "testing candidate: (21, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (20, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (123, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (99, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (32, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(20, 1), (123, 1), (99, 1), (182, 1), (116, 1)]\n",
      "testing candidate: (116, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(21, 1), (20, 1), (123, 1), (99, 1), (182, 1), (116, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(20, 1), (123, 1), (99, 1), (182, 1), (116, 1)]\n",
      "final target samples: [(21, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 22 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 22 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(22, 1)]\n",
      "testing candidate: (22, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (172, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (168, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (15, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (40, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(172, 1), (26, 1), (168, 1), (15, 1)]\n",
      "testing candidate: (15, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(22, 1), (172, 1), (26, 1), (168, 1), (15, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(172, 1), (26, 1), (168, 1), (15, 1)]\n",
      "final target samples: [(22, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 23 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 23 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(23, 1)]\n",
      "testing candidate: (23, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (76, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (8, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (172, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (180, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (127, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (153, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(76, 1), (8, 1), (172, 1), (180, 1), (127, 1)]\n",
      "testing candidate: (127, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(23, 1), (76, 1), (8, 1), (172, 1), (180, 1), (127, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(76, 1), (8, 1), (172, 1), (180, 1), (127, 1)]\n",
      "final target samples: [(23, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 24 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 24 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(24, 1)]\n",
      "testing candidate: (24, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (21, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (77, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (53, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (99, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (3, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(21, 1), (77, 1), (53, 1), (99, 1), (126, 1)]\n",
      "testing candidate: (126, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(24, 1), (21, 1), (77, 1), (53, 1), (99, 1), (126, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(21, 1), (77, 1), (53, 1), (99, 1), (126, 1)]\n",
      "final target samples: [(24, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 25 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 25 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(25, 1)]\n",
      "testing candidate: (25, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (99, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (23, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (39, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (67, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (32, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(149, 1), (99, 1), (23, 1), (39, 1), (67, 1)]\n",
      "testing candidate: (67, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(25, 1), (149, 1), (99, 1), (23, 1), (39, 1), (67, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(149, 1), (99, 1), (23, 1), (39, 1), (67, 1)]\n",
      "final target samples: [(25, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 26 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 26 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(26, 1)]\n",
      "testing candidate: (26, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (13, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (129, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (68, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (75, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (102, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (77, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(13, 1), (129, 1), (68, 1), (75, 1), (102, 1)]\n",
      "testing candidate: (102, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(26, 1), (13, 1), (129, 1), (68, 1), (75, 1), (102, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(13, 1), (129, 1), (68, 1), (75, 1), (102, 1)]\n",
      "final target samples: [(26, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 27 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 27 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(27, 1)]\n",
      "testing candidate: (27, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (77, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (23, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (183, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (57, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(77, 1), (149, 1), (23, 1), (183, 1), (57, 1)]\n",
      "testing candidate: (57, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(27, 1), (77, 1), (149, 1), (23, 1), (183, 1), (57, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(77, 1), (149, 1), (23, 1), (183, 1), (57, 1)]\n",
      "final target samples: [(27, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 28 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 28 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(28, 1)]\n",
      "testing candidate: (28, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (113, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (122, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (179, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(59, 1), (113, 1), (46, 1), (122, 1), (154, 1)]\n",
      "testing candidate: (154, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(28, 1), (59, 1), (113, 1), (46, 1), (122, 1), (154, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(59, 1), (113, 1), (46, 1), (122, 1), (154, 1)]\n",
      "final target samples: [(28, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 29 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 29 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(29, 1)]\n",
      "testing candidate: (29, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (4, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (12, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(182, 1), (4, 1), (59, 1), (12, 1)]\n",
      "testing candidate: (12, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(29, 1), (182, 1), (4, 1), (59, 1), (12, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(182, 1), (4, 1), (59, 1), (12, 1)]\n",
      "final target samples: [(29, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 30 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 30 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(30, 1)]\n",
      "testing candidate: (30, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (101, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (13, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (128, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (81, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (97, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(101, 1), (13, 1), (128, 1), (81, 1), (97, 1), (116, 1)]\n",
      "testing candidate: (116, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(30, 1), (101, 1), (13, 1), (128, 1), (81, 1), (97, 1), (116, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(101, 1), (13, 1), (128, 1), (81, 1), (97, 1), (116, 1)]\n",
      "final target samples: [(30, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 31 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 31 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(31, 1)]\n",
      "testing candidate: (31, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (63, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (12, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (111, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (159, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (100, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(59, 1), (63, 1), (12, 1), (111, 1), (159, 1)]\n",
      "testing candidate: (12, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(31, 1), (59, 1), (63, 1), (12, 1), (111, 1), (159, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(59, 1), (63, 1), (12, 1), (111, 1), (159, 1)]\n",
      "final target samples: [(31, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 32 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 32 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(32, 1)]\n",
      "testing candidate: (32, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (133, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (135, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (147, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (21, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (110, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(133, 1), (135, 1), (147, 1), (21, 1), (48, 1)]\n",
      "testing candidate: (48, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(32, 1), (133, 1), (135, 1), (147, 1), (21, 1), (48, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(133, 1), (135, 1), (147, 1), (21, 1), (48, 1)]\n",
      "final target samples: [(32, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 33 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 33 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(33, 1)]\n",
      "testing candidate: (33, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (63, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (190, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (11, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (1, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(63, 1), (137, 1), (190, 1), (94, 1), (11, 1)]\n",
      "testing candidate: (11, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(33, 1), (63, 1), (137, 1), (190, 1), (94, 1), (11, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(63, 1), (137, 1), (190, 1), (94, 1), (11, 1)]\n",
      "final target samples: [(33, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 34 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 34 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(34, 1)]\n",
      "testing candidate: (34, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (82, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (162, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (45, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(35, 1), (82, 1), (162, 1), (9, 1), (45, 1)]\n",
      "testing candidate: (45, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(34, 1), (35, 1), (82, 1), (162, 1), (9, 1), (45, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(35, 1), (82, 1), (162, 1), (9, 1), (45, 1)]\n",
      "final target samples: [(34, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 35 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 35 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(35, 1)]\n",
      "testing candidate: (35, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (153, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (17, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (123, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(143, 1), (137, 1), (153, 1), (17, 1), (123, 1)]\n",
      "testing candidate: (123, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(35, 1), (143, 1), (137, 1), (153, 1), (17, 1), (123, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(143, 1), (137, 1), (153, 1), (17, 1), (123, 1)]\n",
      "final target samples: [(35, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 36 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 36 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(36, 1)]\n",
      "testing candidate: (36, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (135, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (109, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (53, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (82, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(48, 1), (135, 1), (109, 1), (170, 1), (53, 1)]\n",
      "testing candidate: (109, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(36, 1), (48, 1), (135, 1), (109, 1), (170, 1), (53, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(48, 1), (135, 1), (109, 1), (170, 1), (53, 1)]\n",
      "final target samples: [(36, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 37 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 37 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(37, 1)]\n",
      "testing candidate: (37, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (139, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (17, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (66, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (188, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (30, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(139, 1), (17, 1), (66, 1), (188, 1), (30, 1)]\n",
      "testing candidate: (30, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(37, 1), (139, 1), (17, 1), (66, 1), (188, 1), (30, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(139, 1), (17, 1), (66, 1), (188, 1), (30, 1)]\n",
      "final target samples: [(37, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 38 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 38 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(38, 1)]\n",
      "testing candidate: (38, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (163, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (119, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (100, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (157, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(35, 1), (163, 1), (119, 1), (100, 1), (157, 1)]\n",
      "testing candidate: (119, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(38, 1), (35, 1), (163, 1), (119, 1), (100, 1), (157, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(35, 1), (163, 1), (119, 1), (100, 1), (157, 1)]\n",
      "final target samples: [(38, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 39 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 39 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(39, 1)]\n",
      "testing candidate: (39, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (34, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (15, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (37, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (165, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (3, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (80, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(34, 1), (15, 1), (37, 1), (165, 1), (3, 1)]\n",
      "testing candidate: (3, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(39, 1), (34, 1), (15, 1), (37, 1), (165, 1), (3, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(34, 1), (15, 1), (37, 1), (165, 1), (3, 1)]\n",
      "final target samples: [(39, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 40 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 40 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(40, 1)]\n",
      "testing candidate: (40, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (17, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (70, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(121, 1), (17, 1)]\n",
      "testing candidate: (17, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(40, 1), (121, 1), (17, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 2 selected sources\n",
      "final source samples: [(121, 1), (17, 1)]\n",
      "final target samples: [(40, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 41 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 41 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(41, 1)]\n",
      "testing candidate: (41, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (173, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (40, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (55, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (95, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(173, 1), (40, 1), (55, 1), (95, 1)]\n",
      "testing candidate: (95, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(41, 1), (173, 1), (40, 1), (55, 1), (95, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(173, 1), (40, 1), (55, 1), (95, 1)]\n",
      "final target samples: [(41, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 42 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 42 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(42, 1)]\n",
      "testing candidate: (42, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (40, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (189, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (60, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(40, 1), (94, 1), (149, 1), (189, 1), (59, 1)]\n",
      "testing candidate: (59, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(42, 1), (40, 1), (94, 1), (149, 1), (189, 1), (59, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(40, 1), (94, 1), (149, 1), (189, 1), (59, 1)]\n",
      "final target samples: [(42, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 43 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 43 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(43, 1)]\n",
      "testing candidate: (43, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (39, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (120, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (146, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (6, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (100, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (50, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (37, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(39, 1), (120, 1), (146, 1), (6, 1), (100, 1), (50, 1)]\n",
      "testing candidate: (120, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(43, 1), (39, 1), (120, 1), (146, 1), (6, 1), (100, 1), (50, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(39, 1), (120, 1), (146, 1), (6, 1), (100, 1), (50, 1)]\n",
      "final target samples: [(43, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 44 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 44 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(44, 1)]\n",
      "testing candidate: (44, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (57, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (69, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (146, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (50, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (134, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (8, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(57, 1), (69, 1), (146, 1), (50, 1), (134, 1)]\n",
      "testing candidate: (134, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(44, 1), (57, 1), (69, 1), (146, 1), (50, 1), (134, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(57, 1), (69, 1), (146, 1), (50, 1), (134, 1)]\n",
      "final target samples: [(44, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 45 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 45 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(45, 1)]\n",
      "testing candidate: (45, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (164, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (97, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (185, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (153, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(164, 1), (121, 1), (97, 1), (167, 1), (185, 1)]\n",
      "testing candidate: (185, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(45, 1), (164, 1), (121, 1), (97, 1), (167, 1), (185, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(164, 1), (121, 1), (97, 1), (167, 1), (185, 1)]\n",
      "final target samples: [(45, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 46 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 46 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(46, 1)]\n",
      "testing candidate: (46, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (43, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (58, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (164, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(43, 1), (58, 1), (182, 1), (164, 1), (154, 1)]\n",
      "testing candidate: (154, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(46, 1), (43, 1), (58, 1), (182, 1), (164, 1), (154, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(43, 1), (58, 1), (182, 1), (164, 1), (154, 1)]\n",
      "final target samples: [(46, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 47 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 47 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(47, 1)]\n",
      "testing candidate: (47, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (67, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(48, 1)]\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(47, 1), (48, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 1 selected sources\n",
      "final source samples: [(48, 1)]\n",
      "final target samples: [(47, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 48 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 48 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(48, 1)]\n",
      "testing candidate: (48, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (146, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (147, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (152, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (162, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (194, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(146, 1), (61, 1), (147, 1), (152, 1), (162, 1)]\n",
      "testing candidate: (162, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(48, 1), (146, 1), (61, 1), (147, 1), (152, 1), (162, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(146, 1), (61, 1), (147, 1), (152, 1), (162, 1)]\n",
      "final target samples: [(48, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 49 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 49 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(49, 1)]\n",
      "testing candidate: (49, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (169, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (112, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (155, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (1, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (6, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(169, 1), (112, 1), (155, 1), (46, 1), (1, 1)]\n",
      "testing candidate: (1, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(49, 1), (169, 1), (112, 1), (155, 1), (46, 1), (1, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(169, 1), (112, 1), (155, 1), (46, 1), (1, 1)]\n",
      "final target samples: [(49, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 50 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 50 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(50, 1)]\n",
      "testing candidate: (50, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (57, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (111, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (163, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (51, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (151, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(57, 1), (9, 1), (111, 1), (163, 1), (51, 1)]\n",
      "testing candidate: (51, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(50, 1), (57, 1), (9, 1), (111, 1), (163, 1), (51, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(57, 1), (9, 1), (111, 1), (163, 1), (51, 1)]\n",
      "final target samples: [(50, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 51 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 51 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(51, 1)]\n",
      "testing candidate: (51, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (93, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (136, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (91, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (111, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (107, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(93, 1), (136, 1), (91, 1), (64, 1), (111, 1)]\n",
      "testing candidate: (136, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(51, 1), (93, 1), (136, 1), (91, 1), (64, 1), (111, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(93, 1), (136, 1), (91, 1), (64, 1), (111, 1)]\n",
      "final target samples: [(51, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 52 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 52 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(52, 1)]\n",
      "testing candidate: (52, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (184, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (60, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (120, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (158, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(54, 1), (149, 1), (184, 1), (60, 1), (120, 1)]\n",
      "testing candidate: (120, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(52, 1), (54, 1), (149, 1), (184, 1), (60, 1), (120, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(54, 1), (149, 1), (184, 1), (60, 1), (120, 1)]\n",
      "final target samples: [(52, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 53 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 53 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(53, 1)]\n",
      "testing candidate: (53, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (156, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (191, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (95, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(156, 1), (191, 1), (48, 1), (46, 1)]\n",
      "testing candidate: (46, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(53, 1), (156, 1), (191, 1), (48, 1), (46, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(156, 1), (191, 1), (48, 1), (46, 1)]\n",
      "final target samples: [(53, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 54 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 54 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(54, 1)]\n",
      "testing candidate: (54, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (51, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (151, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (72, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (123, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(51, 1), (151, 1), (132, 1), (64, 1), (72, 1)]\n",
      "testing candidate: (72, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(54, 1), (51, 1), (151, 1), (132, 1), (64, 1), (72, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(51, 1), (151, 1), (132, 1), (64, 1), (72, 1)]\n",
      "final target samples: [(54, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 55 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 55 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(55, 1)]\n",
      "testing candidate: (55, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (73, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (180, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (163, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (27, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (13, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (179, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(73, 1), (180, 1), (163, 1), (27, 1), (13, 1)]\n",
      "testing candidate: (13, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(55, 1), (73, 1), (180, 1), (163, 1), (27, 1), (13, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(73, 1), (180, 1), (163, 1), (27, 1), (13, 1)]\n",
      "final target samples: [(55, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 56 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 56 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(56, 1)]\n",
      "testing candidate: (56, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (63, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (148, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (5, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (104, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(63, 1), (148, 1), (5, 1), (104, 1)]\n",
      "testing candidate: (104, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(56, 1), (63, 1), (148, 1), (5, 1), (104, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(63, 1), (148, 1), (5, 1), (104, 1)]\n",
      "final target samples: [(56, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 57 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 57 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(57, 1)]\n",
      "testing candidate: (57, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (4, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (190, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(46, 1), (64, 1), (36, 1), (4, 1), (190, 1)]\n",
      "testing candidate: (190, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(57, 1), (46, 1), (64, 1), (36, 1), (4, 1), (190, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(46, 1), (64, 1), (36, 1), (4, 1), (190, 1)]\n",
      "final target samples: [(57, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 58 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 58 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(58, 1)]\n",
      "testing candidate: (58, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (63, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (135, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (52, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (92, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (166, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(63, 1), (135, 1), (64, 1), (52, 1), (92, 1)]\n",
      "testing candidate: (92, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(58, 1), (63, 1), (135, 1), (64, 1), (52, 1), (92, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(63, 1), (135, 1), (64, 1), (52, 1), (92, 1)]\n",
      "final target samples: [(58, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 59 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 59 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(59, 1)]\n",
      "testing candidate: (59, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (62, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (68, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (117, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (188, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(62, 1), (35, 1), (54, 1), (68, 1), (117, 1)]\n",
      "testing candidate: (117, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(59, 1), (62, 1), (35, 1), (54, 1), (68, 1), (117, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(62, 1), (35, 1), (54, 1), (68, 1), (117, 1)]\n",
      "final target samples: [(59, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 60 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 60 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(60, 1)]\n",
      "testing candidate: (60, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (75, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (38, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (183, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (186, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(75, 1), (2, 1), (143, 1), (38, 1), (183, 1)]\n",
      "testing candidate: (183, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(60, 1), (75, 1), (2, 1), (143, 1), (38, 1), (183, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(75, 1), (2, 1), (143, 1), (38, 1), (183, 1)]\n",
      "final target samples: [(60, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 61 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 61 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(61, 1)]\n",
      "testing candidate: (61, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (70, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (165, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (197, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (107, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (166, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(70, 1), (46, 1), (165, 1), (197, 1), (107, 1)]\n",
      "testing candidate: (107, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(61, 1), (70, 1), (46, 1), (165, 1), (197, 1), (107, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(70, 1), (46, 1), (165, 1), (197, 1), (107, 1)]\n",
      "final target samples: [(61, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 62 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 62 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(62, 1)]\n",
      "testing candidate: (62, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (89, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (75, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (107, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (106, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (108, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(61, 1), (89, 1), (75, 1), (107, 1), (106, 1)]\n",
      "testing candidate: (106, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(62, 1), (61, 1), (89, 1), (75, 1), (107, 1), (106, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(61, 1), (89, 1), (75, 1), (107, 1), (106, 1)]\n",
      "final target samples: [(62, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 63 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 63 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(63, 1)]\n",
      "testing candidate: (63, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (142, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (62, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (21, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(142, 1), (62, 1), (21, 1)]\n",
      "testing candidate: (21, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(63, 1), (142, 1), (62, 1), (21, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 3 selected sources\n",
      "final source samples: [(142, 1), (62, 1), (21, 1)]\n",
      "final target samples: [(63, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 64 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 64 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(64, 1)]\n",
      "testing candidate: (64, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (62, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (113, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (123, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (191, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (43, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(62, 1), (113, 1), (123, 1), (140, 1), (191, 1)]\n",
      "testing candidate: (191, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(64, 1), (62, 1), (113, 1), (123, 1), (140, 1), (191, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(62, 1), (113, 1), (123, 1), (140, 1), (191, 1)]\n",
      "final target samples: [(64, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 65 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 65 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(65, 1)]\n",
      "testing candidate: (65, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "no sources selected, nothing to prune ...\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "no sources selected ...\n",
      "final source samples: []\n",
      "final target samples: [(65, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 66 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 66 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(66, 1)]\n",
      "testing candidate: (66, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (62, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (14, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (130, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(62, 1), (14, 1), (130, 1), (137, 1)]\n",
      "testing candidate: (137, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(66, 1), (62, 1), (14, 1), (130, 1), (137, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(62, 1), (14, 1), (130, 1), (137, 1)]\n",
      "final target samples: [(66, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 67 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 67 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(67, 1)]\n",
      "testing candidate: (67, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (89, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (65, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (75, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (109, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (3, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (194, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(46, 1), (89, 1), (65, 1), (75, 1), (109, 1), (3, 1)]\n",
      "testing candidate: (3, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(67, 1), (46, 1), (89, 1), (65, 1), (75, 1), (109, 1), (3, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(46, 1), (89, 1), (65, 1), (75, 1), (109, 1), (3, 1)]\n",
      "final target samples: [(67, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 68 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 68 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(68, 1)]\n",
      "testing candidate: (68, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (120, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (171, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (107, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(74, 1), (120, 1), (140, 1), (132, 1), (171, 1)]\n",
      "testing candidate: (171, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(68, 1), (74, 1), (120, 1), (140, 1), (132, 1), (171, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(74, 1), (120, 1), (140, 1), (132, 1), (171, 1)]\n",
      "final target samples: [(68, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 69 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 69 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(69, 1)]\n",
      "testing candidate: (69, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (93, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (169, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (0, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (181, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(93, 1), (167, 1), (169, 1), (0, 1), (181, 1)]\n",
      "testing candidate: (181, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(69, 1), (93, 1), (167, 1), (169, 1), (0, 1), (181, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(93, 1), (167, 1), (169, 1), (0, 1), (181, 1)]\n",
      "final target samples: [(69, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 70 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 70 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(70, 1)]\n",
      "testing candidate: (70, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (82, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (8, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (65, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (191, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (52, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (95, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(82, 1), (8, 1), (65, 1), (191, 1), (52, 1), (95, 1)]\n",
      "testing candidate: (95, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(70, 1), (82, 1), (8, 1), (65, 1), (191, 1), (52, 1), (95, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(82, 1), (8, 1), (65, 1), (191, 1), (52, 1), (95, 1)]\n",
      "final target samples: [(70, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 71 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 71 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(71, 1)]\n",
      "testing candidate: (71, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (180, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (77, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (60, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (73, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(180, 1), (77, 1), (121, 1), (9, 1), (60, 1)]\n",
      "testing candidate: (60, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(71, 1), (180, 1), (77, 1), (121, 1), (9, 1), (60, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(180, 1), (77, 1), (121, 1), (9, 1), (60, 1)]\n",
      "final target samples: [(71, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 72 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 72 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(72, 1)]\n",
      "testing candidate: (72, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (56, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (106, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (63, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (96, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (180, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(2, 1), (56, 1), (106, 1), (63, 1), (96, 1)]\n",
      "testing candidate: (96, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(72, 1), (2, 1), (56, 1), (106, 1), (63, 1), (96, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(2, 1), (56, 1), (106, 1), (63, 1), (96, 1)]\n",
      "final target samples: [(72, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 73 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 73 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(73, 1)]\n",
      "testing candidate: (73, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (147, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(182, 1)]\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(73, 1), (182, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 1 selected sources\n",
      "final source samples: [(182, 1)]\n",
      "final target samples: [(73, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 74 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 74 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(74, 1)]\n",
      "testing candidate: (74, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (172, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (86, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (196, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(195, 1), (88, 1), (64, 1), (172, 1), (86, 1)]\n",
      "testing candidate: (86, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(74, 1), (195, 1), (88, 1), (64, 1), (172, 1), (86, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(195, 1), (88, 1), (64, 1), (172, 1), (86, 1)]\n",
      "final target samples: [(74, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 75 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 75 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(75, 1)]\n",
      "testing candidate: (75, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (172, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (139, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (123, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (8, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (111, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(172, 1), (88, 1), (139, 1), (123, 1), (8, 1)]\n",
      "testing candidate: (8, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(75, 1), (172, 1), (88, 1), (139, 1), (123, 1), (8, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(172, 1), (88, 1), (139, 1), (123, 1), (8, 1)]\n",
      "final target samples: [(75, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 76 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 76 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(76, 1)]\n",
      "testing candidate: (76, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (185, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (96, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (199, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (29, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (16, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(74, 1), (185, 1), (96, 1), (199, 1), (29, 1)]\n",
      "testing candidate: (29, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(76, 1), (74, 1), (185, 1), (96, 1), (199, 1), (29, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(74, 1), (185, 1), (96, 1), (199, 1), (29, 1)]\n",
      "final target samples: [(76, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 77 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 77 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(77, 1)]\n",
      "testing candidate: (77, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (31, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (42, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (176, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (89, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (68, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(182, 1), (31, 1), (42, 1), (176, 1), (89, 1)]\n",
      "testing candidate: (89, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(77, 1), (182, 1), (31, 1), (42, 1), (176, 1), (89, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(182, 1), (31, 1), (42, 1), (176, 1), (89, 1)]\n",
      "final target samples: [(77, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 78 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 78 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(78, 1)]\n",
      "testing candidate: (78, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (76, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (125, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (17, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (127, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (147, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(76, 1), (125, 1), (17, 1), (127, 1)]\n",
      "testing candidate: (127, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(78, 1), (76, 1), (125, 1), (17, 1), (127, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(76, 1), (125, 1), (17, 1), (127, 1)]\n",
      "final target samples: [(78, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 79 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 79 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(79, 1)]\n",
      "testing candidate: (79, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (81, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (91, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (76, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (181, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (147, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(81, 1), (91, 1), (76, 1), (181, 1)]\n",
      "testing candidate: (91, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(79, 1), (81, 1), (91, 1), (76, 1), (181, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(81, 1), (91, 1), (76, 1), (181, 1)]\n",
      "final target samples: [(79, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 80 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 80 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(80, 1)]\n",
      "testing candidate: (80, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (67, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (173, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (122, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (188, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (163, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(67, 1), (173, 1), (122, 1), (116, 1), (188, 1)]\n",
      "testing candidate: (188, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(80, 1), (67, 1), (173, 1), (122, 1), (116, 1), (188, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(67, 1), (173, 1), (122, 1), (116, 1), (188, 1)]\n",
      "final target samples: [(80, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 81 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 81 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(81, 1)]\n",
      "testing candidate: (81, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (17, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (136, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (11, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (103, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (191, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(17, 1), (136, 1), (11, 1), (103, 1), (64, 1), (191, 1)]\n",
      "testing candidate: (191, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(81, 1), (17, 1), (136, 1), (11, 1), (103, 1), (64, 1), (191, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(17, 1), (136, 1), (11, 1), (103, 1), (64, 1), (191, 1)]\n",
      "final target samples: [(81, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 82 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 82 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(82, 1)]\n",
      "testing candidate: (82, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (52, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (92, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (16, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (51, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(74, 1), (52, 1), (92, 1), (16, 1), (51, 1)]\n",
      "testing candidate: (51, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(82, 1), (74, 1), (52, 1), (92, 1), (16, 1), (51, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(74, 1), (52, 1), (92, 1), (16, 1), (51, 1)]\n",
      "final target samples: [(82, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 83 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 83 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(83, 1)]\n",
      "testing candidate: (83, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (91, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (99, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (123, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (194, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(195, 1), (91, 1), (99, 1), (123, 1), (144, 1)]\n",
      "testing candidate: (144, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(83, 1), (195, 1), (91, 1), (99, 1), (123, 1), (144, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(195, 1), (91, 1), (99, 1), (123, 1), (144, 1)]\n",
      "final target samples: [(83, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 84 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 84 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(84, 1)]\n",
      "testing candidate: (84, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (85, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (158, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (75, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (193, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(85, 1), (182, 1), (158, 1), (75, 1), (193, 1)]\n",
      "testing candidate: (193, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(84, 1), (85, 1), (182, 1), (158, 1), (75, 1), (193, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(85, 1), (182, 1), (158, 1), (75, 1), (193, 1)]\n",
      "final target samples: [(84, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 85 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 85 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(85, 1)]\n",
      "testing candidate: (85, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (148, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (83, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (98, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (63, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (53, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(148, 1), (83, 1), (98, 1), (63, 1), (126, 1)]\n",
      "testing candidate: (126, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(85, 1), (148, 1), (83, 1), (98, 1), (63, 1), (126, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(148, 1), (83, 1), (98, 1), (63, 1), (126, 1)]\n",
      "final target samples: [(85, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 86 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 86 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(86, 1)]\n",
      "testing candidate: (86, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (124, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (53, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (99, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(74, 1), (124, 1), (53, 1)]\n",
      "testing candidate: (53, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(86, 1), (74, 1), (124, 1), (53, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 3 selected sources\n",
      "final source samples: [(74, 1), (124, 1), (53, 1)]\n",
      "final target samples: [(86, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 87 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 87 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(87, 1)]\n",
      "testing candidate: (87, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (110, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (52, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (166, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (65, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(110, 1), (88, 1), (52, 1), (166, 1), (126, 1)]\n",
      "testing candidate: (126, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(87, 1), (110, 1), (88, 1), (52, 1), (166, 1), (126, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(110, 1), (88, 1), (52, 1), (166, 1), (126, 1)]\n",
      "final target samples: [(87, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 88 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 88 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(88, 1)]\n",
      "testing candidate: (88, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (87, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (89, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (65, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (80, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (128, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(87, 1), (89, 1), (65, 1), (80, 1), (150, 1), (128, 1)]\n",
      "testing candidate: (128, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(88, 1), (87, 1), (89, 1), (65, 1), (80, 1), (150, 1), (128, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(87, 1), (89, 1), (65, 1), (80, 1), (150, 1), (128, 1)]\n",
      "final target samples: [(88, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 89 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 89 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(89, 1)]\n",
      "testing candidate: (89, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (157, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (66, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (151, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(46, 1), (157, 1), (66, 1), (150, 1)]\n",
      "testing candidate: (150, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(89, 1), (46, 1), (157, 1), (66, 1), (150, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(46, 1), (157, 1), (66, 1), (150, 1)]\n",
      "final target samples: [(89, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 90 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 90 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(90, 1)]\n",
      "testing candidate: (90, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (68, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (111, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (95, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (158, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (66, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(68, 1), (111, 1), (74, 1), (95, 1), (158, 1)]\n",
      "testing candidate: (158, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(90, 1), (68, 1), (111, 1), (74, 1), (95, 1), (158, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(68, 1), (111, 1), (74, 1), (95, 1), (158, 1)]\n",
      "final target samples: [(90, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 91 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 91 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(91, 1)]\n",
      "testing candidate: (91, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (155, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (122, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (123, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (37, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (28, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(54, 1), (155, 1), (122, 1), (123, 1), (37, 1)]\n",
      "testing candidate: (122, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(91, 1), (54, 1), (155, 1), (122, 1), (123, 1), (37, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(54, 1), (155, 1), (122, 1), (123, 1), (37, 1)]\n",
      "final target samples: [(91, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 92 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 92 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(92, 1)]\n",
      "testing candidate: (92, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (50, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (166, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (181, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (80, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (58, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(46, 1), (50, 1), (166, 1), (181, 1), (80, 1)]\n",
      "testing candidate: (80, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(92, 1), (46, 1), (50, 1), (166, 1), (181, 1), (80, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(46, 1), (50, 1), (166, 1), (181, 1), (80, 1)]\n",
      "final target samples: [(92, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 93 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 93 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(93, 1)]\n",
      "testing candidate: (93, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (89, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (90, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (187, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (82, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (189, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (151, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(89, 1), (90, 1), (187, 1), (82, 1), (189, 1)]\n",
      "testing candidate: (189, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(93, 1), (89, 1), (90, 1), (187, 1), (82, 1), (189, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(89, 1), (90, 1), (187, 1), (82, 1), (189, 1)]\n",
      "final target samples: [(93, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 94 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 94 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(94, 1)]\n",
      "testing candidate: (94, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (85, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (82, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (41, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (43, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (29, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(85, 1), (82, 1), (41, 1), (43, 1), (29, 1)]\n",
      "testing candidate: (29, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(94, 1), (85, 1), (82, 1), (41, 1), (43, 1), (29, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(85, 1), (82, 1), (41, 1), (43, 1), (29, 1)]\n",
      "final target samples: [(94, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 95 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 95 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(95, 1)]\n",
      "testing candidate: (95, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (96, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (62, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (60, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (45, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (100, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(96, 1), (62, 1), (60, 1), (45, 1), (100, 1)]\n",
      "testing candidate: (100, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(95, 1), (96, 1), (62, 1), (60, 1), (45, 1), (100, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(96, 1), (62, 1), (60, 1), (45, 1), (100, 1)]\n",
      "final target samples: [(95, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 96 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 96 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(96, 1)]\n",
      "testing candidate: (96, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (194, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (41, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (127, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(194, 1), (41, 1)]\n",
      "testing candidate: (41, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(96, 1), (194, 1), (41, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 2 selected sources\n",
      "final source samples: [(194, 1), (41, 1)]\n",
      "final target samples: [(96, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 97 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 97 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(97, 1)]\n",
      "testing candidate: (97, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (171, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (95, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (69, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (6, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (43, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (130, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (30, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(171, 1), (95, 1), (69, 1), (6, 1), (43, 1), (130, 1)]\n",
      "testing candidate: (130, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(97, 1), (171, 1), (95, 1), (69, 1), (6, 1), (43, 1), (130, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(171, 1), (95, 1), (69, 1), (6, 1), (43, 1), (130, 1)]\n",
      "final target samples: [(97, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 98 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 98 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(98, 1)]\n",
      "testing candidate: (98, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (180, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (197, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (193, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (84, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (30, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(180, 1), (197, 1), (193, 1), (84, 1), (170, 1)]\n",
      "testing candidate: (170, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(98, 1), (180, 1), (197, 1), (193, 1), (84, 1), (170, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(180, 1), (197, 1), (193, 1), (84, 1), (170, 1)]\n",
      "final target samples: [(98, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 99 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 99 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(99, 1)]\n",
      "testing candidate: (99, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (198, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(198, 1), (195, 1), (26, 1), (138, 1), (137, 1)]\n",
      "testing candidate: (137, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(99, 1), (198, 1), (195, 1), (26, 1), (138, 1), (137, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(198, 1), (195, 1), (26, 1), (138, 1), (137, 1)]\n",
      "final target samples: [(99, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 100 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 100 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(100, 1)]\n",
      "testing candidate: (100, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (10, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (65, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (55, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (0, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (191, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(132, 1), (10, 1), (65, 1), (55, 1), (0, 1)]\n",
      "testing candidate: (0, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(100, 1), (132, 1), (10, 1), (65, 1), (55, 1), (0, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(132, 1), (10, 1), (65, 1), (55, 1), (0, 1)]\n",
      "final target samples: [(100, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 101 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 101 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(101, 1)]\n",
      "testing candidate: (101, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (57, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (100, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (192, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (32, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (81, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (178, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(57, 1), (100, 1), (192, 1), (32, 1), (81, 1)]\n",
      "testing candidate: (81, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(101, 1), (57, 1), (100, 1), (192, 1), (32, 1), (81, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(57, 1), (100, 1), (192, 1), (32, 1), (81, 1)]\n",
      "final target samples: [(101, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 102 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 102 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(102, 1)]\n",
      "testing candidate: (102, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (1, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (28, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(9, 1), (170, 1), (1, 1), (35, 1), (28, 1)]\n",
      "testing candidate: (1, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(102, 1), (9, 1), (170, 1), (1, 1), (35, 1), (28, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(9, 1), (170, 1), (1, 1), (35, 1), (28, 1)]\n",
      "final target samples: [(102, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 103 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 103 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(103, 1)]\n",
      "testing candidate: (103, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (67, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (1, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (127, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (85, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (193, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (173, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(67, 1), (1, 1), (127, 1), (85, 1), (193, 1)]\n",
      "testing candidate: (193, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(103, 1), (67, 1), (1, 1), (127, 1), (85, 1), (193, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(67, 1), (1, 1), (127, 1), (85, 1), (193, 1)]\n",
      "final target samples: [(103, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 104 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 104 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(104, 1)]\n",
      "testing candidate: (104, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (4, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (113, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (114, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (111, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(4, 1), (132, 1), (113, 1), (149, 1), (114, 1)]\n",
      "testing candidate: (114, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(104, 1), (4, 1), (132, 1), (113, 1), (149, 1), (114, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(4, 1), (132, 1), (113, 1), (149, 1), (114, 1)]\n",
      "final target samples: [(104, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 105 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 105 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(105, 1)]\n",
      "testing candidate: (105, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (104, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (100, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (186, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (67, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (162, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (148, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(104, 1), (100, 1), (186, 1), (67, 1), (162, 1)]\n",
      "testing candidate: (162, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(105, 1), (104, 1), (100, 1), (186, 1), (67, 1), (162, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(104, 1), (100, 1), (186, 1), (67, 1), (162, 1)]\n",
      "final target samples: [(105, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 106 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 106 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(106, 1)]\n",
      "testing candidate: (106, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (7, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (135, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (0, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (19, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(7, 1), (135, 1), (144, 1), (195, 1), (0, 1)]\n",
      "testing candidate: (0, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(106, 1), (7, 1), (135, 1), (144, 1), (195, 1), (0, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(7, 1), (135, 1), (144, 1), (195, 1), (0, 1)]\n",
      "final target samples: [(106, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 107 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 107 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(107, 1)]\n",
      "testing candidate: (107, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (109, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (10, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (87, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (79, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (177, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(109, 1), (167, 1), (10, 1), (87, 1), (79, 1)]\n",
      "testing candidate: (79, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(107, 1), (109, 1), (167, 1), (10, 1), (87, 1), (79, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(109, 1), (167, 1), (10, 1), (87, 1), (79, 1)]\n",
      "final target samples: [(107, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 108 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 108 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(108, 1)]\n",
      "testing candidate: (108, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (105, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (169, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (3, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(9, 1), (105, 1), (149, 1), (26, 1), (169, 1)]\n",
      "testing candidate: (169, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(108, 1), (9, 1), (105, 1), (149, 1), (26, 1), (169, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(9, 1), (105, 1), (149, 1), (26, 1), (169, 1)]\n",
      "final target samples: [(108, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 109 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 109 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(109, 1)]\n",
      "testing candidate: (109, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (110, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (15, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (39, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (120, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(110, 1), (15, 1), (39, 1)]\n",
      "testing candidate: (39, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(109, 1), (110, 1), (15, 1), (39, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 3 selected sources\n",
      "final source samples: [(110, 1), (15, 1), (39, 1)]\n",
      "final target samples: [(109, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 110 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 110 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(110, 1)]\n",
      "testing candidate: (110, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (104, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (105, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (99, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (22, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (80, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(104, 1), (36, 1), (105, 1), (99, 1), (22, 1)]\n",
      "testing candidate: (22, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(110, 1), (104, 1), (36, 1), (105, 1), (99, 1), (22, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(104, 1), (36, 1), (105, 1), (99, 1), (22, 1)]\n",
      "final target samples: [(110, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 111 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 111 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(111, 1)]\n",
      "testing candidate: (111, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (104, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (52, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (146, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (131, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(104, 1), (52, 1), (146, 1), (167, 1), (154, 1)]\n",
      "testing candidate: (154, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(111, 1), (104, 1), (52, 1), (146, 1), (167, 1), (154, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(104, 1), (52, 1), (146, 1), (167, 1), (154, 1)]\n",
      "final target samples: [(111, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 112 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 112 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(112, 1)]\n",
      "testing candidate: (112, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (169, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (161, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (91, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (83, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (135, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(143, 1), (169, 1), (161, 1), (91, 1), (83, 1)]\n",
      "testing candidate: (83, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(112, 1), (143, 1), (169, 1), (161, 1), (91, 1), (83, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(143, 1), (169, 1), (161, 1), (91, 1), (83, 1)]\n",
      "final target samples: [(112, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 113 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 113 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(113, 1)]\n",
      "testing candidate: (113, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (117, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (129, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (114, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (36, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (49, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(117, 1), (129, 1), (114, 1), (36, 1), (49, 1)]\n",
      "testing candidate: (49, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(113, 1), (117, 1), (129, 1), (114, 1), (36, 1), (49, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(117, 1), (129, 1), (114, 1), (36, 1), (49, 1)]\n",
      "final target samples: [(113, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 114 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 114 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(114, 1)]\n",
      "testing candidate: (114, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (8, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (175, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(121, 1), (170, 1), (8, 1), (54, 1), (46, 1)]\n",
      "testing candidate: (46, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(114, 1), (121, 1), (170, 1), (8, 1), (54, 1), (46, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(121, 1), (170, 1), (8, 1), (54, 1), (46, 1)]\n",
      "final target samples: [(114, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 115 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 115 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(115, 1)]\n",
      "testing candidate: (115, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (13, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (117, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (30, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(13, 1), (117, 1), (88, 1), (30, 1), (121, 1)]\n",
      "testing candidate: (121, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(115, 1), (13, 1), (117, 1), (88, 1), (30, 1), (121, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(13, 1), (117, 1), (88, 1), (30, 1), (121, 1)]\n",
      "final target samples: [(115, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 116 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 116 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(116, 1)]\n",
      "testing candidate: (116, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (135, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(135, 1), (48, 1)]\n",
      "testing candidate: (48, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(116, 1), (135, 1), (48, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 2 selected sources\n",
      "final source samples: [(135, 1), (48, 1)]\n",
      "final target samples: [(116, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 117 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 117 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(117, 1)]\n",
      "testing candidate: (117, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (112, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (56, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (51, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (7, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (158, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(112, 1), (56, 1), (51, 1), (121, 1), (7, 1)]\n",
      "testing candidate: (7, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(117, 1), (112, 1), (56, 1), (51, 1), (121, 1), (7, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(112, 1), (56, 1), (51, 1), (121, 1), (7, 1)]\n",
      "final target samples: [(117, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 118 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 118 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(118, 1)]\n",
      "testing candidate: (118, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (57, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (49, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (34, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (111, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (42, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(57, 1), (49, 1), (34, 1), (121, 1), (111, 1)]\n",
      "testing candidate: (111, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(118, 1), (57, 1), (49, 1), (34, 1), (121, 1), (111, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(57, 1), (49, 1), (34, 1), (121, 1), (111, 1)]\n",
      "final target samples: [(118, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 119 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 119 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(119, 1)]\n",
      "testing candidate: (119, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (108, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (190, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (56, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (0, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(140, 1), (116, 1), (108, 1), (190, 1), (56, 1)]\n",
      "testing candidate: (56, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(119, 1), (140, 1), (116, 1), (108, 1), (190, 1), (56, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(140, 1), (116, 1), (108, 1), (190, 1), (56, 1)]\n",
      "final target samples: [(119, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 120 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 120 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(120, 1)]\n",
      "testing candidate: (120, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (16, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (169, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (51, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (25, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(121, 1), (16, 1), (169, 1), (137, 1), (51, 1)]\n",
      "testing candidate: (51, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(120, 1), (121, 1), (16, 1), (169, 1), (137, 1), (51, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(121, 1), (16, 1), (169, 1), (137, 1), (51, 1)]\n",
      "final target samples: [(120, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 121 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 121 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(121, 1)]\n",
      "testing candidate: (121, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (173, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (1, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (117, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (193, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (125, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(173, 1), (1, 1), (117, 1), (48, 1), (193, 1)]\n",
      "testing candidate: (193, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(121, 1), (173, 1), (1, 1), (117, 1), (48, 1), (193, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(173, 1), (1, 1), (117, 1), (48, 1), (193, 1)]\n",
      "final target samples: [(121, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 122 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 122 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(122, 1)]\n",
      "testing candidate: (122, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (15, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (117, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (134, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (124, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(15, 1), (117, 1), (134, 1), (35, 1), (195, 1)]\n",
      "testing candidate: (195, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(122, 1), (15, 1), (117, 1), (134, 1), (35, 1), (195, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(15, 1), (117, 1), (134, 1), (35, 1), (195, 1)]\n",
      "final target samples: [(122, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 123 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 123 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(123, 1)]\n",
      "testing candidate: (123, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (124, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (22, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (120, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (41, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (146, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (162, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(124, 1), (22, 1), (120, 1), (41, 1), (146, 1)]\n",
      "testing candidate: (146, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(123, 1), (124, 1), (22, 1), (120, 1), (41, 1), (146, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(124, 1), (22, 1), (120, 1), (41, 1), (146, 1)]\n",
      "final target samples: [(123, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 124 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 124 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(124, 1)]\n",
      "testing candidate: (124, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (112, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (111, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (21, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (191, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (119, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(112, 1), (111, 1), (74, 1), (21, 1), (191, 1)]\n",
      "testing candidate: (191, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(124, 1), (112, 1), (111, 1), (74, 1), (21, 1), (191, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(112, 1), (111, 1), (74, 1), (21, 1), (191, 1)]\n",
      "final target samples: [(124, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 125 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 125 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(125, 1)]\n",
      "testing candidate: (125, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (152, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (142, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (118, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(126, 1), (26, 1), (152, 1), (138, 1), (142, 1)]\n",
      "testing candidate: (142, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(125, 1), (126, 1), (26, 1), (152, 1), (138, 1), (142, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(126, 1), (26, 1), (152, 1), (138, 1), (142, 1)]\n",
      "final target samples: [(125, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 126 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 126 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(126, 1)]\n",
      "testing candidate: (126, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (66, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (79, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (23, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(121, 1), (66, 1), (150, 1), (79, 1), (23, 1)]\n",
      "testing candidate: (150, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(126, 1), (121, 1), (66, 1), (150, 1), (79, 1), (23, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(121, 1), (66, 1), (150, 1), (79, 1), (23, 1)]\n",
      "final target samples: [(126, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 127 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 127 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(127, 1)]\n",
      "testing candidate: (127, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (145, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (109, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (161, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (113, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (17, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (73, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(145, 1), (109, 1), (161, 1), (113, 1), (17, 1)]\n",
      "testing candidate: (17, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(127, 1), (145, 1), (109, 1), (161, 1), (113, 1), (17, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(145, 1), (109, 1), (161, 1), (113, 1), (17, 1)]\n",
      "final target samples: [(127, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 128 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 128 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(128, 1)]\n",
      "testing candidate: (128, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (75, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (15, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (44, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(126, 1), (75, 1), (15, 1)]\n",
      "testing candidate: (15, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(128, 1), (126, 1), (75, 1), (15, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 3 selected sources\n",
      "final source samples: [(126, 1), (75, 1), (15, 1)]\n",
      "final target samples: [(128, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 129 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 129 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(129, 1)]\n",
      "testing candidate: (129, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (77, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (157, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (134, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(182, 1), (77, 1), (94, 1), (157, 1), (26, 1)]\n",
      "testing candidate: (26, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(129, 1), (182, 1), (77, 1), (94, 1), (157, 1), (26, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(182, 1), (77, 1), (94, 1), (157, 1), (26, 1)]\n",
      "final target samples: [(129, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 130 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 130 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(130, 1)]\n",
      "testing candidate: (130, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (101, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (119, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (135, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (81, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (0, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(101, 1), (119, 1), (135, 1), (81, 1), (143, 1)]\n",
      "testing candidate: (143, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(130, 1), (101, 1), (119, 1), (135, 1), (81, 1), (143, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(101, 1), (119, 1), (135, 1), (81, 1), (143, 1)]\n",
      "final target samples: [(130, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 131 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 131 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(131, 1)]\n",
      "testing candidate: (131, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (101, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (155, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (118, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (47, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (70, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(101, 1), (155, 1), (118, 1), (88, 1), (47, 1)]\n",
      "testing candidate: (47, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(131, 1), (101, 1), (155, 1), (118, 1), (88, 1), (47, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(101, 1), (155, 1), (118, 1), (88, 1), (47, 1)]\n",
      "final target samples: [(131, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 132 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 132 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(132, 1)]\n",
      "testing candidate: (132, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (104, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (135, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (0, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (44, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(104, 1), (135, 1), (61, 1), (59, 1), (0, 1)]\n",
      "testing candidate: (0, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(132, 1), (104, 1), (135, 1), (61, 1), (59, 1), (0, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(104, 1), (135, 1), (61, 1), (59, 1), (0, 1)]\n",
      "final target samples: [(132, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 133 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 133 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(133, 1)]\n",
      "testing candidate: (133, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (95, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (190, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (40, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(2, 1), (95, 1), (190, 1), (88, 1), (40, 1)]\n",
      "testing candidate: (40, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(133, 1), (2, 1), (95, 1), (190, 1), (88, 1), (40, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(2, 1), (95, 1), (190, 1), (88, 1), (40, 1)]\n",
      "final target samples: [(133, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 134 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 134 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(134, 1)]\n",
      "testing candidate: (134, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (49, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (41, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (158, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (38, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(49, 1), (132, 1), (41, 1), (158, 1), (38, 1)]\n",
      "testing candidate: (38, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(134, 1), (49, 1), (132, 1), (41, 1), (158, 1), (38, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(49, 1), (132, 1), (41, 1), (158, 1), (38, 1)]\n",
      "final target samples: [(134, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 135 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 135 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(135, 1)]\n",
      "testing candidate: (135, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (33, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (108, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (165, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (39, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(143, 1), (33, 1), (132, 1), (108, 1), (165, 1)]\n",
      "testing candidate: (165, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(135, 1), (143, 1), (33, 1), (132, 1), (108, 1), (165, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(143, 1), (33, 1), (132, 1), (108, 1), (165, 1)]\n",
      "final target samples: [(135, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 136 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 136 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(136, 1)]\n",
      "testing candidate: (136, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (112, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (32, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (21, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (52, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(112, 1), (32, 1), (140, 1), (21, 1)]\n",
      "testing candidate: (21, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(136, 1), (112, 1), (32, 1), (140, 1), (21, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(112, 1), (32, 1), (140, 1), (21, 1)]\n",
      "final target samples: [(136, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 137 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 137 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(137, 1)]\n",
      "testing candidate: (137, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (56, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (133, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (71, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(182, 1), (56, 1), (116, 1), (133, 1), (170, 1)]\n",
      "testing candidate: (116, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(137, 1), (182, 1), (56, 1), (116, 1), (133, 1), (170, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(182, 1), (56, 1), (116, 1), (133, 1), (170, 1)]\n",
      "final target samples: [(137, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 138 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 138 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(138, 1)]\n",
      "testing candidate: (138, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (139, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (117, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (180, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(137, 1), (139, 1), (9, 1), (117, 1), (61, 1)]\n",
      "testing candidate: (61, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(138, 1), (137, 1), (139, 1), (9, 1), (117, 1), (61, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(137, 1), (139, 1), (9, 1), (117, 1), (61, 1)]\n",
      "final target samples: [(138, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 139 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 139 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(139, 1)]\n",
      "testing candidate: (139, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (65, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (120, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (23, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (107, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (5, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(116, 1), (65, 1), (120, 1), (23, 1), (107, 1)]\n",
      "testing candidate: (107, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(139, 1), (116, 1), (65, 1), (120, 1), (23, 1), (107, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(116, 1), (65, 1), (120, 1), (23, 1), (107, 1)]\n",
      "final target samples: [(139, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 140 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 140 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(140, 1)]\n",
      "testing candidate: (140, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (113, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (163, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (167, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (139, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(113, 1), (163, 1), (74, 1), (61, 1), (167, 1)]\n",
      "testing candidate: (167, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(140, 1), (113, 1), (163, 1), (74, 1), (61, 1), (167, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(113, 1), (163, 1), (74, 1), (61, 1), (167, 1)]\n",
      "final target samples: [(140, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 141 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 141 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(141, 1)]\n",
      "testing candidate: (141, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (146, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (127, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (168, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (5, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (160, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(146, 1), (2, 1), (127, 1), (168, 1), (5, 1)]\n",
      "testing candidate: (5, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(141, 1), (146, 1), (2, 1), (127, 1), (168, 1), (5, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(146, 1), (2, 1), (127, 1), (168, 1), (5, 1)]\n",
      "final target samples: [(141, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 142 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 142 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(142, 1)]\n",
      "testing candidate: (142, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (51, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (113, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (20, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (81, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(51, 1), (113, 1), (20, 1), (81, 1), (195, 1)]\n",
      "testing candidate: (195, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(142, 1), (51, 1), (113, 1), (20, 1), (81, 1), (195, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(51, 1), (113, 1), (20, 1), (81, 1), (195, 1)]\n",
      "final target samples: [(142, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 143 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 143 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(143, 1)]\n",
      "testing candidate: (143, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (56, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (115, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (44, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(56, 1), (115, 1), (94, 1), (64, 1), (138, 1)]\n",
      "testing candidate: (138, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(143, 1), (56, 1), (115, 1), (94, 1), (64, 1), (138, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(56, 1), (115, 1), (94, 1), (64, 1), (138, 1)]\n",
      "final target samples: [(143, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 144 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 144 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(144, 1)]\n",
      "testing candidate: (144, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (146, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (47, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (89, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (34, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (6, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (20, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(146, 1), (47, 1), (89, 1), (34, 1), (6, 1)]\n",
      "testing candidate: (47, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(144, 1), (146, 1), (47, 1), (89, 1), (34, 1), (6, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(146, 1), (47, 1), (89, 1), (34, 1), (6, 1)]\n",
      "final target samples: [(144, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 145 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 145 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(145, 1)]\n",
      "testing candidate: (145, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (114, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (44, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (178, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (32, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (19, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(74, 1), (114, 1), (44, 1), (178, 1), (32, 1)]\n",
      "testing candidate: (32, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(145, 1), (74, 1), (114, 1), (44, 1), (178, 1), (32, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(74, 1), (114, 1), (44, 1), (178, 1), (32, 1)]\n",
      "final target samples: [(145, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 146 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 146 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(146, 1)]\n",
      "testing candidate: (146, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (128, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(128, 1)]\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(146, 1), (128, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 1 selected sources\n",
      "final source samples: [(128, 1)]\n",
      "final target samples: [(146, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 147 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 147 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(147, 1)]\n",
      "testing candidate: (147, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (114, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (172, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (39, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (192, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(114, 1), (170, 1), (143, 1), (172, 1), (39, 1)]\n",
      "testing candidate: (39, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(147, 1), (114, 1), (170, 1), (143, 1), (172, 1), (39, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(114, 1), (170, 1), (143, 1), (172, 1), (39, 1)]\n",
      "final target samples: [(147, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 148 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 148 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(148, 1)]\n",
      "testing candidate: (148, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (43, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (70, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (40, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (90, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (179, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(43, 1), (70, 1), (138, 1), (40, 1), (90, 1)]\n",
      "testing candidate: (90, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(148, 1), (43, 1), (70, 1), (138, 1), (40, 1), (90, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(43, 1), (70, 1), (138, 1), (40, 1), (90, 1)]\n",
      "final target samples: [(148, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 149 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 149 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(149, 1)]\n",
      "testing candidate: (149, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (76, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (58, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (7, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (45, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(126, 1), (76, 1), (58, 1), (7, 1)]\n",
      "testing candidate: (7, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(149, 1), (126, 1), (76, 1), (58, 1), (7, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(126, 1), (76, 1), (58, 1), (7, 1)]\n",
      "final target samples: [(149, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 150 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 150 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(150, 1)]\n",
      "testing candidate: (150, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (173, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (50, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (127, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (145, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (162, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(154, 1), (173, 1), (50, 1), (127, 1), (145, 1)]\n",
      "testing candidate: (145, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(150, 1), (154, 1), (173, 1), (50, 1), (127, 1), (145, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(154, 1), (173, 1), (50, 1), (127, 1), (145, 1)]\n",
      "final target samples: [(150, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 151 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 151 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(151, 1)]\n",
      "testing candidate: (151, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (87, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (199, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (157, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(46, 1), (87, 1), (199, 1), (157, 1), (126, 1)]\n",
      "testing candidate: (126, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(151, 1), (46, 1), (87, 1), (199, 1), (157, 1), (126, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(46, 1), (87, 1), (199, 1), (157, 1), (126, 1)]\n",
      "final target samples: [(151, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 152 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 152 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(152, 1)]\n",
      "testing candidate: (152, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (46, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (79, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (110, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (173, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (178, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(154, 1), (46, 1), (79, 1), (110, 1), (173, 1)]\n",
      "testing candidate: (173, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(152, 1), (154, 1), (46, 1), (79, 1), (110, 1), (173, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(154, 1), (46, 1), (79, 1), (110, 1), (173, 1)]\n",
      "final target samples: [(152, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 153 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 153 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(153, 1)]\n",
      "testing candidate: (153, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (66, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (58, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(154, 1), (66, 1), (94, 1), (58, 1), (170, 1)]\n",
      "testing candidate: (170, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(153, 1), (154, 1), (66, 1), (94, 1), (58, 1), (170, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(154, 1), (66, 1), (94, 1), (58, 1), (170, 1)]\n",
      "final target samples: [(153, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 154 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 154 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(154, 1)]\n",
      "testing candidate: (154, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (88, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (17, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (163, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(88, 1), (17, 1), (144, 1), (140, 1)]\n",
      "testing candidate: (140, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(154, 1), (88, 1), (17, 1), (144, 1), (140, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(88, 1), (17, 1), (144, 1), (140, 1)]\n",
      "final target samples: [(154, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 155 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 155 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(155, 1)]\n",
      "testing candidate: (155, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (169, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (47, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (14, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (192, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (171, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(48, 1), (169, 1), (47, 1), (14, 1), (192, 1)]\n",
      "testing candidate: (192, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(155, 1), (48, 1), (169, 1), (47, 1), (14, 1), (192, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(48, 1), (169, 1), (47, 1), (14, 1), (192, 1)]\n",
      "final target samples: [(155, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 156 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 156 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(156, 1)]\n",
      "testing candidate: (156, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (90, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (148, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (79, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (95, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(90, 1), (148, 1), (138, 1), (79, 1)]\n",
      "testing candidate: (79, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(156, 1), (90, 1), (148, 1), (138, 1), (79, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(90, 1), (148, 1), (138, 1), (79, 1)]\n",
      "final target samples: [(156, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 157 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 157 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(157, 1)]\n",
      "testing candidate: (157, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (160, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (73, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (79, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (103, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(54, 1), (140, 1), (160, 1), (73, 1), (79, 1)]\n",
      "testing candidate: (79, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(157, 1), (54, 1), (140, 1), (160, 1), (73, 1), (79, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(54, 1), (140, 1), (160, 1), (73, 1), (79, 1)]\n",
      "final target samples: [(157, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 158 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 158 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(158, 1)]\n",
      "testing candidate: (158, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (186, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (42, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (19, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (81, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (176, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(186, 1), (154, 1), (42, 1), (19, 1), (81, 1)]\n",
      "testing candidate: (81, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(158, 1), (186, 1), (154, 1), (42, 1), (19, 1), (81, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(186, 1), (154, 1), (42, 1), (19, 1), (81, 1)]\n",
      "final target samples: [(158, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 159 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 159 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(159, 1)]\n",
      "testing candidate: (159, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (113, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (16, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (196, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (75, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (156, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (48, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(113, 1), (16, 1), (196, 1), (75, 1), (156, 1)]\n",
      "testing candidate: (196, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(159, 1), (113, 1), (16, 1), (196, 1), (75, 1), (156, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(113, 1), (16, 1), (196, 1), (75, 1), (156, 1)]\n",
      "final target samples: [(159, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 160 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 160 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(160, 1)]\n",
      "testing candidate: (160, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (85, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (179, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (180, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(54, 1), (85, 1), (179, 1), (64, 1), (132, 1)]\n",
      "testing candidate: (132, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(160, 1), (54, 1), (85, 1), (179, 1), (64, 1), (132, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(54, 1), (85, 1), (179, 1), (64, 1), (132, 1)]\n",
      "final target samples: [(160, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 161 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 161 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(161, 1)]\n",
      "testing candidate: (161, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (157, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (34, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (156, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(59, 1), (157, 1), (34, 1)]\n",
      "testing candidate: (34, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(161, 1), (59, 1), (157, 1), (34, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 3 selected sources\n",
      "final source samples: [(59, 1), (157, 1), (34, 1)]\n",
      "final target samples: [(161, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 162 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 162 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(162, 1)]\n",
      "testing candidate: (162, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (64, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (70, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (115, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (166, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (87, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(64, 1), (70, 1), (115, 1), (166, 1)]\n",
      "testing candidate: (166, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(162, 1), (64, 1), (70, 1), (115, 1), (166, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(64, 1), (70, 1), (115, 1), (166, 1)]\n",
      "final target samples: [(162, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 163 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 163 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(163, 1)]\n",
      "testing candidate: (163, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (69, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (130, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(69, 1)]\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(163, 1), (69, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 1 selected sources\n",
      "final source samples: [(69, 1)]\n",
      "final target samples: [(163, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 164 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 164 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(164, 1)]\n",
      "testing candidate: (164, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (165, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (160, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (147, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(165, 1), (160, 1)]\n",
      "testing candidate: (160, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(164, 1), (165, 1), (160, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 2 selected sources\n",
      "final source samples: [(165, 1), (160, 1)]\n",
      "final target samples: [(164, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 165 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 165 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(165, 1)]\n",
      "testing candidate: (165, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (136, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (166, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (70, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (29, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (190, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(136, 1), (166, 1), (70, 1), (144, 1), (29, 1)]\n",
      "testing candidate: (29, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(165, 1), (136, 1), (166, 1), (70, 1), (144, 1), (29, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(136, 1), (166, 1), (70, 1), (144, 1), (29, 1)]\n",
      "final target samples: [(165, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 166 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 166 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(166, 1)]\n",
      "testing candidate: (166, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (60, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (40, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (190, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (69, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (159, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(2, 1), (60, 1), (40, 1), (138, 1), (190, 1), (69, 1)]\n",
      "testing candidate: (69, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(166, 1), (2, 1), (60, 1), (40, 1), (138, 1), (190, 1), (69, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(2, 1), (60, 1), (40, 1), (138, 1), (190, 1), (69, 1)]\n",
      "final target samples: [(166, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 167 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 167 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(167, 1)]\n",
      "testing candidate: (167, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (128, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (63, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (188, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (121, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (156, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(128, 1), (63, 1), (188, 1), (121, 1), (156, 1)]\n",
      "testing candidate: (156, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(167, 1), (128, 1), (63, 1), (188, 1), (121, 1), (156, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(128, 1), (63, 1), (188, 1), (121, 1), (156, 1)]\n",
      "final target samples: [(167, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 168 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 168 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(168, 1)]\n",
      "testing candidate: (168, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (96, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (25, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (104, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (156, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(96, 1), (150, 1), (126, 1), (25, 1), (104, 1)]\n",
      "testing candidate: (104, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(168, 1), (96, 1), (150, 1), (126, 1), (25, 1), (104, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(96, 1), (150, 1), (126, 1), (25, 1), (104, 1)]\n",
      "final target samples: [(168, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 169 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 169 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(169, 1)]\n",
      "testing candidate: (169, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (34, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (112, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (119, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(34, 1), (112, 1)]\n",
      "testing candidate: (112, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(169, 1), (34, 1), (112, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 2 selected sources\n",
      "final source samples: [(34, 1), (112, 1)]\n",
      "final target samples: [(169, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 170 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 170 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(170, 1)]\n",
      "testing candidate: (170, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (20, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(2, 1)]\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(170, 1), (2, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 1 selected sources\n",
      "final source samples: [(2, 1)]\n",
      "final target samples: [(170, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 171 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 171 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(171, 1)]\n",
      "testing candidate: (171, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (7, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (164, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (108, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (179, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (53, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(7, 1), (164, 1), (108, 1), (179, 1)]\n",
      "testing candidate: (179, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(171, 1), (7, 1), (164, 1), (108, 1), (179, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(7, 1), (164, 1), (108, 1), (179, 1)]\n",
      "final target samples: [(171, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 172 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 172 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(172, 1)]\n",
      "testing candidate: (172, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (171, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (122, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (173, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (56, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (26, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (177, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(171, 1), (122, 1), (173, 1), (56, 1), (26, 1)]\n",
      "testing candidate: (26, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(172, 1), (171, 1), (122, 1), (173, 1), (56, 1), (26, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(171, 1), (122, 1), (173, 1), (56, 1), (26, 1)]\n",
      "final target samples: [(172, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 173 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 173 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(173, 1)]\n",
      "testing candidate: (173, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (165, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (92, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (133, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (81, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (21, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(165, 1), (154, 1), (92, 1), (133, 1), (81, 1)]\n",
      "testing candidate: (81, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(173, 1), (165, 1), (154, 1), (92, 1), (133, 1), (81, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(165, 1), (154, 1), (92, 1), (133, 1), (81, 1)]\n",
      "final target samples: [(173, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 174 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 174 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(174, 1)]\n",
      "testing candidate: (174, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (153, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (104, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (190, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(61, 1), (9, 1), (153, 1), (140, 1), (104, 1)]\n",
      "testing candidate: (104, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(174, 1), (61, 1), (9, 1), (153, 1), (140, 1), (104, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(61, 1), (9, 1), (153, 1), (140, 1), (104, 1)]\n",
      "final target samples: [(174, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 175 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 175 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(175, 1)]\n",
      "testing candidate: (175, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (172, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (145, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (183, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (177, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(172, 1), (145, 1), (59, 1), (183, 1)]\n",
      "testing candidate: (183, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(175, 1), (172, 1), (145, 1), (59, 1), (183, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(172, 1), (145, 1), (59, 1), (183, 1)]\n",
      "final target samples: [(175, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 176 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 176 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(176, 1)]\n",
      "testing candidate: (176, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (129, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (16, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (70, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (198, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (6, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(129, 1), (150, 1), (16, 1), (70, 1), (198, 1)]\n",
      "testing candidate: (198, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(176, 1), (129, 1), (150, 1), (16, 1), (70, 1), (198, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(129, 1), (150, 1), (16, 1), (70, 1), (198, 1)]\n",
      "final target samples: [(176, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 177 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 177 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(177, 1)]\n",
      "testing candidate: (177, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (153, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (124, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (78, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(153, 1), (124, 1)]\n",
      "testing candidate: (124, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(177, 1), (153, 1), (124, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 2 selected sources\n",
      "final source samples: [(153, 1), (124, 1)]\n",
      "final target samples: [(177, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 178 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 178 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(178, 1)]\n",
      "testing candidate: (178, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(61, 1)]\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(178, 1), (61, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 1 selected sources\n",
      "final source samples: [(61, 1)]\n",
      "final target samples: [(178, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 179 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 179 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(179, 1)]\n",
      "testing candidate: (179, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (55, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (134, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(55, 1)]\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(179, 1), (55, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 1 selected sources\n",
      "final source samples: [(55, 1)]\n",
      "final target samples: [(179, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 180 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 180 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(180, 1)]\n",
      "testing candidate: (180, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (73, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (129, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (116, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (136, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (124, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(73, 1), (35, 1), (129, 1), (116, 1), (136, 1)]\n",
      "testing candidate: (136, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(180, 1), (73, 1), (35, 1), (129, 1), (116, 1), (136, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(73, 1), (35, 1), (129, 1), (116, 1), (136, 1)]\n",
      "final target samples: [(180, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 181 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 181 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(181, 1)]\n",
      "testing candidate: (181, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (193, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (55, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (185, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (139, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (47, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (43, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(193, 1), (55, 1), (185, 1), (139, 1), (47, 1)]\n",
      "testing candidate: (47, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(181, 1), (193, 1), (55, 1), (185, 1), (139, 1), (47, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(193, 1), (55, 1), (185, 1), (139, 1), (47, 1)]\n",
      "final target samples: [(181, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 182 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 182 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(182, 1)]\n",
      "testing candidate: (182, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (49, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (184, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (94, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (62, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (54, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(49, 1), (184, 1), (2, 1), (94, 1), (62, 1)]\n",
      "testing candidate: (62, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(182, 1), (49, 1), (184, 1), (2, 1), (94, 1), (62, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(49, 1), (184, 1), (2, 1), (94, 1), (62, 1)]\n",
      "final target samples: [(182, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 183 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 183 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(183, 1)]\n",
      "testing candidate: (183, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (172, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (184, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (24, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (170, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (99, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(172, 1), (182, 1), (184, 1), (24, 1), (170, 1)]\n",
      "testing candidate: (170, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(183, 1), (172, 1), (182, 1), (184, 1), (24, 1), (170, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(172, 1), (182, 1), (184, 1), (24, 1), (170, 1)]\n",
      "final target samples: [(183, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 184 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 184 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(184, 1)]\n",
      "testing candidate: (184, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (76, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (109, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (59, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (39, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (83, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(76, 1), (109, 1), (59, 1), (39, 1)]\n",
      "testing candidate: (39, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(184, 1), (76, 1), (109, 1), (59, 1), (39, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(76, 1), (109, 1), (59, 1), (39, 1)]\n",
      "final target samples: [(184, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 185 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 185 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(185, 1)]\n",
      "testing candidate: (185, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (76, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (2, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (140, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (3, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (187, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (152, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(76, 1), (2, 1), (140, 1), (3, 1), (187, 1)]\n",
      "testing candidate: (187, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(185, 1), (76, 1), (2, 1), (140, 1), (3, 1), (187, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(76, 1), (2, 1), (140, 1), (3, 1), (187, 1)]\n",
      "final target samples: [(185, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 186 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 186 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(186, 1)]\n",
      "testing candidate: (186, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (155, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (25, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (143, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (137, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(155, 1), (25, 1), (143, 1), (137, 1)]\n",
      "testing candidate: (137, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(186, 1), (155, 1), (25, 1), (143, 1), (137, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 4 selected sources\n",
      "final source samples: [(155, 1), (25, 1), (143, 1), (137, 1)]\n",
      "final target samples: [(186, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 187 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 187 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(187, 1)]\n",
      "testing candidate: (187, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (49, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (56, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (117, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (69, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (106, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(49, 1), (56, 1), (117, 1), (149, 1), (69, 1)]\n",
      "testing candidate: (69, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(187, 1), (49, 1), (56, 1), (117, 1), (149, 1), (69, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(49, 1), (56, 1), (117, 1), (149, 1), (69, 1)]\n",
      "final target samples: [(187, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 188 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 188 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(188, 1)]\n",
      "testing candidate: (188, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (178, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (87, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (148, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (180, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (96, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (60, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(178, 1), (87, 1), (148, 1), (180, 1), (96, 1)]\n",
      "testing candidate: (96, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(188, 1), (178, 1), (87, 1), (148, 1), (180, 1), (96, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(178, 1), (87, 1), (148, 1), (180, 1), (96, 1)]\n",
      "final target samples: [(188, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 189 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 189 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(189, 1)]\n",
      "testing candidate: (189, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (183, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (129, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (150, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (126, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (90, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(183, 1), (129, 1), (150, 1), (144, 1), (138, 1), (126, 1)]\n",
      "testing candidate: (126, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(189, 1), (183, 1), (129, 1), (150, 1), (144, 1), (138, 1), (126, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 6 selected sources\n",
      "final source samples: [(183, 1), (129, 1), (150, 1), (144, 1), (138, 1), (126, 1)]\n",
      "final target samples: [(189, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 190 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 190 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(190, 1)]\n",
      "testing candidate: (190, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (29, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (5, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (74, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (168, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (187, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(29, 1), (5, 1), (9, 1), (74, 1), (168, 1)]\n",
      "testing candidate: (168, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(190, 1), (29, 1), (5, 1), (9, 1), (74, 1), (168, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(29, 1), (5, 1), (9, 1), (74, 1), (168, 1)]\n",
      "final target samples: [(190, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 191 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 191 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(191, 1)]\n",
      "testing candidate: (191, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (79, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (67, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (131, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (173, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (149, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (5, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(79, 1), (67, 1), (131, 1), (173, 1), (149, 1)]\n",
      "testing candidate: (131, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(191, 1), (79, 1), (67, 1), (131, 1), (173, 1), (149, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(79, 1), (67, 1), (131, 1), (173, 1), (149, 1)]\n",
      "final target samples: [(191, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 192 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 192 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(192, 1)]\n",
      "testing candidate: (192, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (154, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (86, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (162, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (110, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (117, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(154, 1), (9, 1), (86, 1), (162, 1), (110, 1)]\n",
      "testing candidate: (110, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(192, 1), (154, 1), (9, 1), (86, 1), (162, 1), (110, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(154, 1), (9, 1), (86, 1), (162, 1), (110, 1)]\n",
      "final target samples: [(192, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 193 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 193 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(193, 1)]\n",
      "testing candidate: (193, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (183, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (95, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (155, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (11, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (194, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (138, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(183, 1), (95, 1), (155, 1), (11, 1), (194, 1)]\n",
      "testing candidate: (194, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(193, 1), (183, 1), (95, 1), (155, 1), (11, 1), (194, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(183, 1), (95, 1), (155, 1), (11, 1), (194, 1)]\n",
      "final target samples: [(193, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 194 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 194 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(194, 1)]\n",
      "testing candidate: (194, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (195, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (96, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (144, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (190, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (195, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (151, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(96, 1), (182, 1), (144, 1), (190, 1), (195, 1)]\n",
      "testing candidate: (195, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(194, 1), (96, 1), (182, 1), (144, 1), (190, 1), (195, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(96, 1), (182, 1), (144, 1), (190, 1), (195, 1)]\n",
      "final target samples: [(194, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 195 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 195 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(195, 1)]\n",
      "testing candidate: (195, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (196, 1), (197, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (29, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (187, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (85, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (119, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (162, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (186, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(29, 1), (187, 1), (85, 1), (119, 1), (162, 1)]\n",
      "testing candidate: (162, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(195, 1), (29, 1), (187, 1), (85, 1), (119, 1), (162, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(29, 1), (187, 1), (85, 1), (119, 1), (162, 1)]\n",
      "final target samples: [(195, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 196 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 196 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(196, 1)]\n",
      "testing candidate: (196, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (197, 1), (198, 1), (199, 1)]\n",
      "testing candidate: (198, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (17, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (197, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (76, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (61, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(198, 1), (17, 1), (197, 1), (76, 1), (132, 1)]\n",
      "testing candidate: (132, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(196, 1), (198, 1), (17, 1), (197, 1), (76, 1), (132, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(198, 1), (17, 1), (197, 1), (76, 1), (132, 1)]\n",
      "final target samples: [(196, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 197 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 197 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(197, 1)]\n",
      "testing candidate: (197, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (198, 1), (199, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (93, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (182, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (7, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (39, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (163, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (132, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(93, 1), (182, 1), (7, 1), (39, 1), (163, 1)]\n",
      "testing candidate: (163, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(197, 1), (93, 1), (182, 1), (7, 1), (39, 1), (163, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(93, 1), (182, 1), (7, 1), (39, 1), (163, 1)]\n",
      "final target samples: [(197, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 198 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 198 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(198, 1)]\n",
      "testing candidate: (198, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (199, 1)]\n",
      "testing candidate: (199, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (155, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (35, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (103, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (168, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (196, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(199, 1), (155, 1), (35, 1), (103, 1), (168, 1)]\n",
      "testing candidate: (168, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(198, 1), (199, 1), (155, 1), (35, 1), (103, 1), (168, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(199, 1), (155, 1), (35, 1), (103, 1), (168, 1)]\n",
      "final target samples: [(198, 1)]\n",
      "\n",
      "\n",
      "\n",
      "####### analysing target with index 199 from list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\n",
      "\n",
      "Target: 199 - testing sources [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198]\n",
      "\n",
      "---------------------------- (1) include target candidates\n",
      "candidate set: [(199, 1)]\n",
      "testing candidate: (199, 1) \n",
      "WARNING: Number of replications is not sufficient to generate the desired number of surrogates. Permuting samples in time instead.\n",
      "maximum statistic, n_perm: 200\n",
      "\n",
      "---------------------------- (2) include source candidates\n",
      "candidate set: [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1), (13, 1), (14, 1), (15, 1), (16, 1), (17, 1), (18, 1), (19, 1), (20, 1), (21, 1), (22, 1), (23, 1), (24, 1), (25, 1), (26, 1), (27, 1), (28, 1), (29, 1), (30, 1), (31, 1), (32, 1), (33, 1), (34, 1), (35, 1), (36, 1), (37, 1), (38, 1), (39, 1), (40, 1), (41, 1), (42, 1), (43, 1), (44, 1), (45, 1), (46, 1), (47, 1), (48, 1), (49, 1), (50, 1), (51, 1), (52, 1), (53, 1), (54, 1), (55, 1), (56, 1), (57, 1), (58, 1), (59, 1), (60, 1), (61, 1), (62, 1), (63, 1), (64, 1), (65, 1), (66, 1), (67, 1), (68, 1), (69, 1), (70, 1), (71, 1), (72, 1), (73, 1), (74, 1), (75, 1), (76, 1), (77, 1), (78, 1), (79, 1), (80, 1), (81, 1), (82, 1), (83, 1), (84, 1), (85, 1), (86, 1), (87, 1), (88, 1), (89, 1), (90, 1), (91, 1), (92, 1), (93, 1), (94, 1), (95, 1), (96, 1), (97, 1), (98, 1), (99, 1), (100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1), (110, 1), (111, 1), (112, 1), (113, 1), (114, 1), (115, 1), (116, 1), (117, 1), (118, 1), (119, 1), (120, 1), (121, 1), (122, 1), (123, 1), (124, 1), (125, 1), (126, 1), (127, 1), (128, 1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1), (136, 1), (137, 1), (138, 1), (139, 1), (140, 1), (141, 1), (142, 1), (143, 1), (144, 1), (145, 1), (146, 1), (147, 1), (148, 1), (149, 1), (150, 1), (151, 1), (152, 1), (153, 1), (154, 1), (155, 1), (156, 1), (157, 1), (158, 1), (159, 1), (160, 1), (161, 1), (162, 1), (163, 1), (164, 1), (165, 1), (166, 1), (167, 1), (168, 1), (169, 1), (170, 1), (171, 1), (172, 1), (173, 1), (174, 1), (175, 1), (176, 1), (177, 1), (178, 1), (179, 1), (180, 1), (181, 1), (182, 1), (183, 1), (184, 1), (185, 1), (186, 1), (187, 1), (188, 1), (189, 1), (190, 1), (191, 1), (192, 1), (193, 1), (194, 1), (195, 1), (196, 1), (197, 1), (198, 1)]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "testing candidate: (118, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (67, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (187, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (124, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (9, 1) maximum statistic, n_perm: 200\n",
      "testing candidate: (55, 1) maximum statistic, n_perm: 200\n",
      " -- not significant\n",
      "\n",
      "---------------------------- (3) prune source candidate\n",
      "selected candidates: [(118, 1), (67, 1), (187, 1), (124, 1), (9, 1)]\n",
      "testing candidate: (9, 1) minimum statistic, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "---------------------------- (4) final statistics\n",
      "selected variables: [(199, 1), (118, 1), (67, 1), (187, 1), (124, 1), (9, 1)]\n",
      "omnibus test, n_perm: 500\n",
      " -- significant\n",
      "\n",
      "sequential maximum statistic, n_perm: 500, testing 5 selected sources\n",
      "final source samples: [(118, 1), (67, 1), (187, 1), (124, 1), (9, 1)]\n",
      "final target samples: [(199, 1)]\n",
      "\n",
      "\n",
      "WARNING: Number of permutations (n_perm_max_seq) for at least one target is too low to allow for FDR correction (FDR-threshold: 0.0000, min. theoretically possible p-value: 0.002).\n"
     ]
    }
   ],
   "source": [
    "from idtxl.multivariate_te import MultivariateTE\n",
    "from idtxl.data import Data\n",
    "from idtxl.visualise_graph import plot_network\n",
    "\n",
    "data = Data(discrete, normalise=False, dim_order=\"ps\")\n",
    "network_analysis = MultivariateTE()\n",
    "settings = {'cmi_estimator': 'JidtDiscreteCMI',\n",
    "            'max_lag_sources': 1,\n",
    "            'min_lag_sources': 1}\n",
    "results = network_analysis.analyse_network(settings=settings, data=data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "saveFile = 'results_{0}_te.p'.format(\"BOLD\")\n",
    "pickle.dump(results, open(saveFile, 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx \n",
    "from idtxl.idtxl_io import export_networkx_graph\n",
    "mat = results.get_adjacency_matrix(weights=\"binary\", fdr=False)\n",
    "G = export_networkx_graph(mat, weights=\"binary\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Binary Adjacency Matrix')"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "nx.draw_kamada_kawai(G, node_size=10)\n",
    "plt.title(\"Brain Network Hairball\")\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.imshow(nx.to_numpy_array(G))\n",
    "plt.title(\"Binary Adjacency Matrix\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'In-Degree Distribution')"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "plt.hist(dict(G.out_degree).values())\n",
    "plt.title(\"Out-Degree Distribution\")\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "plt.hist(dict(G.in_degree).values())\n",
    "plt.title(\"In-Degree Distribution\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hypergraphs (A Brief Discussion)\n",
    "\n",
    "A few times we have made reference to the idea that higher-order information dynamics (for example, when information is synergistically shared by multiple elements but not present in any one uniquely) \"want\" to be modeled as hypergraphs. \n",
    "\n",
    "What is a hypergraph?\n",
    "\n",
    "A hypergraph is a generalization of a graph/network that relaxes the requirement that edges only be incident on two nodes. A \"normal\" graph is always defined in the same way: as a pair of vertices and edges:\n",
    "\n",
    "\\begin{equation}\n",
    "G = (V, E)\n",
    "\\end{equation}\n",
    "\n",
    "Where the vertext set is a set of single elements $V = \\{v_1, v_2, v_3, ... v_n\\}$ and the edge set is a set of tuples $E = \\{(v_a, v_b), (v_c, v_d) ... \\})$ where $v_i, v_j \\in V$. If $G$ is directed, then the order of $v_i$ and $v_j$ in the edge tuple matters (the source is the first element, the target the second). If the graph is undirected, order doesn't matter. \n",
    "\n",
    "A hypergraph $H = (V, E)$ allows the elements of $E$ to be of arbitrary length. For instance, you could have an \"edge\" that is incident on three elements $(v_1, v_2, v_3)$. You can have directed hypergraphs, where arbitrary nodes are \"sources\" and \"targets.\"\n",
    "\n",
    "Think back to our mutual information example, where the node $XOR_{12} = X_1 \\bigoplus X_2$ (where $\\bigoplus$ is the exclusive-OR operator). We know that \n",
    "\n",
    "\\begin{equation}\n",
    "MI(X_1 ; XOR_12) = 0 \\text{ } bit\n",
    "\\end{equation}\n",
    "\n",
    "\\begin{equation}\n",
    "MI(X_2 ; XOR_12) = 0 \\text{ } bit\n",
    "\\end{equation}\n",
    "\n",
    "\\begin{equation}\n",
    "MI(X1X2 ; XOR_12) = 1 \\text{ }bit\n",
    "\\end{equation}\n",
    "\n",
    "As we saw, it is difficult to find a pairwise representation of this relationship that can be *squished* onto an inferred network. The most natural representation is not a pairwise network at all, but rather a directed hyperedge between $(X_1, X_2 ; XOR_{12})$\n",
    "\n",
    "In many complex systems, as we have seen, pairwise networks can throw out higher-order information, and hypergraphs are one plausible advance the field could make to address these more complex relationships. \n",
    "\n",
    "https://en.wikipedia.org/wiki/Hypergraph"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
